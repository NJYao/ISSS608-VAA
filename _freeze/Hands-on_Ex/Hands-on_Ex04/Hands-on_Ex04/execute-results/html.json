{
  "hash": "0854b2aca78f55ed8d9d73518a04518b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex04\"\ndate: \"May 8, 2025\"\ndate-modified: \"last-modified\"\nauthor: \"Ng Jin Yao\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n#Visualising Distribution\n\n## **Learning Outcome**\n\nVisualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statis tical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n## **Getting Started**\n\n### **Installing and loading the packages**\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\n\n-   ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\n\n-   tidyverse, a family of R packages to meet the modern data science and visual communication needs,\n\n-   ggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\n\n-   colorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n### **Data import**\n\nFor the purpose of this exercise, *Exam_data.csv* will be used.\n\nIn the code chunk below, [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of [**readr**](https://readr.tidyverse.org/) package is used to import *Exam_data.csv* into R and saved it into a tibble data.frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n## **Visualising Distribution with Ridgeline Plot**\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n![](images/clipboard-3897783365.png)\n\n::: callout-note\n## Note\n\n-   Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\n-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n## **Plotting ridgeline graph: ggridges method**\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using [ggridges](https://wilkelab.org/ggridges/index.html) package.\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: false\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## **Varying fill colors along the x axis**\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n### **Mapping the probabilities directly onto colour**\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n::: callout-warning\n## Important\n\nIt is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.\n:::\n\n### **Ridgeline plots with quantile lines**\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## **Visualising Distribution with Raincloud Plot**\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by **ggdist** and ggplot2 packages.\n\n### **9.4.1 Plotting a Half Eye graph**\n\nFirst, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\\\n\n:::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n\n::: callout-note\n## Things to learn from the code chunk above\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n::::\n\n### **Adding the boxplot with `geom_boxplot()`**\n\nNext, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n\n:::\n\n### **Adding the Dot Plots with `stat_dots()`**\n\nNext, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n### **Finishing touch**\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n\n\n# Visual Statistical Analysis\n\n## **Learning Outcome**\n\nIn this hands-on exercise, you will gain hands-on experience on using:\n\n-   ggstatsplot package to create visual graphics with rich statistical information,\n\n-   performance package to visualise model diagnostics, and\n\n-   parameters package to visualise model parameters\n\n## **Visual Statistical Analysis with ggstatsplot**\n\n[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) ![](https://r4va.netlify.app/chap10/img/image1.jpg){width=\"52\"} is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n```         \n-   To provide alternative statistical inference methods by default. \n-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n```\n\n![](images/clipboard-18459593.png)\n\n## **Getting Started**\n\n### **Installing and launching R packages**\n\nIn this exercise, **ggstatsplot** and **tidyverse** will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\n### **Importing data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\nprint(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n```\n\n\n:::\n:::\n\n\n\n### **One-sample test: *gghistostats()* method**\n\nIn the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n### **Unpacking the Bayes Factor**\n\n-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\n-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n![](images/clipboard-3788699597.png){fig-align=\"center\" width=\"294\"}\n\n-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n### **How to interpret Bayes Factor**\n\nA **Bayes Factor** can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:\n\n![](images/clipboard-3819306550.png){fig-align=\"center\" width=\"469\"}\n\n### **Two-sample mean test: *ggbetweenstats()***\n\nIn the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n### **Oneway ANOVA Test: *ggbetweenstats()* method**\n\nIn the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n-   “ns” → only non-significant\n\n-   “s” → only significant\n\n-   “all” → everything\n\n#### ggbetweenstats - Summary of tests\n\n![](images/clipboard-1318965758.png)\n\n![![](images/clipboard-2170736383.png)](images/clipboard-11828082.png)\n\n### **Significant Test of Correlation: *ggscatterstats()***\n\nIn the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n### **Significant Test of Association (Dependence) : *ggbarstats()* methods**\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n```\n:::\n\n\n\nIn this code chunk below [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n# **Visualising Uncertainty**\n\n## **Learning Outcome**\n\nVisualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\n-   to plot statistics error bars by using ggplot2,\n\n-   to plot interactive error bars by combining ggplot2, plotly and DT,\n\n-   to create advanced by using ggdist, and\n\n-   to create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n## **Getting Started**\n\n### **Installing and loading the packages**\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   tidyverse, a family of R packages for data science process,\n\n-   plotly for creating interactive plot,\n\n-   gganimate for creating animation plot,\n\n-   DT for displaying interactive html table,\n\n-   crosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\n\n-   ggdist for visualising distribution and uncertainty.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n```\n:::\n\n\n\n### **Data import**\n\nFor the purpose of this exercise, *Exam_data.csv* will be used.\n\nThis data was previously loaded.\n\n## **Visualizing the uncertainty of point estimates: ggplot2 methods**\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n::: callout-warning\n## Important\n\n-   Don’t confuse the uncertainty of a point estimate with the variation in the sample\n:::\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in *exam* tibble data frame.\n\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n```\n:::\n\n\n\n::: callout-tip\n## Things to learn from the code chunk above\n\n-   `group_by()` of **dplyr** package is used to group the observation by RACE,\n\n-   `summarise()` is used to compute the count of observations, mean, standard deviation\n\n-   `mutate()` is used to derive standard error of Maths by RACE, and\n\n-   the output is save as a tibble data table called *my_sum*.\n:::\n\n::: callout-note\n## Note\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n:::\n\n",
    "supporting": [
      "Hands-on_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}