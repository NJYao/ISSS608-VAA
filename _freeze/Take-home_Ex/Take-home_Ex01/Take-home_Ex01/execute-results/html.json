{
  "hash": "6a94cf3ae5e4d5f2f1d476bc685f2146",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\ndate: \"May 1, 2025\"\ndate-modified: \"last-modified\"\nauthor: \"Ng Jin Yao\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# Overview\n\n## Setting the scene\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on **demographic structures and distribution of Singapore in 2024**.\n\n## The task\n\nAssuming the role of the graphical editor of the media company, you are tasked to prepare **at most three data visualisation for the article**.\n\nThe data should be processed by using appropriate¬†**tidyverse**¬†family of packages and the data visualisation must be prepared using¬†**ggplot2**¬†and its extensions.\n\n# Getting started\n\n## Loading packages\n\nThe following R packages are loaded using pacman::p_load() on top of the tidyverse packages:\n\n-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\n-   ggthemes: an R package provides some extra themes, geoms, and scales for ‚Äòggplot2‚Äô.\n-   patchwork: an R package for preparing composite figure created using ggplot2.\n-   dplyr: for data manipulation with the tidyverse package\n-   scales: for formatting and scaling data plots\n-   xml12: for working with HTML\n-   sf: for handling GIS file formats\n\nThe sf and xml12 packages were used as a dataset is extracted from a GEOJSON file later on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggplot2, ggrepel, patchwork, \n               ggthemes,dplyr, xml12, sf, scales) \n```\n:::\n\n\n\n## Import data\n\nThe dataset \"[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesexfa2024.ashx)\" retrieved from the [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) will be used.\n\nWe will be importing this dataset as \"sgResData24\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgResData24 <- read_csv(\"data/respopagesex2024.csv\")\n```\n:::\n\n\n\n## Data pre-processing\n\nWe first take a look at the data and check for:\n\n1.  Any missing/NULL values or entries\n\n2.  If any column data types need adjustments\n\n3.  If any new columns need to be introduced to be used for visualisations\n\n4.  Any duplicate entries\n\n::: panel-tabset\n## Preview of the dataset\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60424     6\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 6\n  PA         SZ                     Age   Sex       Pop  Time\n  <chr>      <chr>                  <chr> <chr>   <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n```\n\n\n:::\n:::\n\n\n\n## Descriptive Statistics\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time     \n Min.   :   0.0   Min.   :2024  \n 1st Qu.:   0.0   1st Qu.:2024  \n Median :  20.0   Median :2024  \n Mean   :  69.4   Mean   :2024  \n 3rd Qu.:  90.0   3rd Qu.:2024  \n Max.   :1180.0   Max.   :2024  \n```\n\n\n:::\n:::\n\n\n\n## Checking for duplicate values\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistinct(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60,424 √ó 6\n   PA         SZ                     Age   Sex       Pop  Time\n   <chr>      <chr>                  <chr> <chr>   <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024\n# ‚Ñπ 60,414 more rows\n```\n\n\n:::\n:::\n\n\n\nFrom the output of distinct() there are 60,424 x 6 rows returned, showing that there are no duplicated rows in the dataset.\n:::\n\nUsing the count() function, we can view the unique values/names from each column\n\n::: panel-tabset\n## PA Column Count\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(sgResData24,PA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 55 √ó 2\n   PA                          n\n   <chr>                   <int>\n 1 Ang Mo Kio               2184\n 2 Bedok                    1456\n 3 Bishan                    546\n 4 Boon Lay                  728\n 5 Bukit Batok              1638\n 6 Bukit Merah              3094\n 7 Bukit Panjang            1274\n 8 Bukit Timah              1456\n 9 Central Water Catchment   182\n10 Changi                    546\n# ‚Ñπ 45 more rows\n```\n\n\n:::\n:::\n\n\n\nThere are 55 unique planning areas\n\n## SZ Column Count\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(sgResData24,SZ)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 332 √ó 2\n   SZ                         n\n   <chr>                  <int>\n 1 Admiralty                182\n 2 Airport Road             182\n 3 Alexandra Hill           182\n 4 Alexandra North          182\n 5 Aljunied                 182\n 6 Anak Bukit               182\n 7 Anchorvale               182\n 8 Ang Mo Kio Town Centre   182\n 9 Anson                    182\n10 Bahar                    182\n# ‚Ñπ 322 more rows\n```\n\n\n:::\n:::\n\n\n\nThere are 332 unique subzones\n\n## AG Column Count\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(sgResData24,Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 91 √ó 2\n   Age       n\n   <chr> <int>\n 1 0       664\n 2 1       664\n 3 10      664\n 4 11      664\n 5 12      664\n 6 13      664\n 7 14      664\n 8 15      664\n 9 16      664\n10 17      664\n# ‚Ñπ 81 more rows\n```\n\n\n:::\n:::\n\n\n\n## Sex Column Count\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(sgResData24,Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 2\n  Sex         n\n  <chr>   <int>\n1 Females 30212\n2 Males   30212\n```\n\n\n:::\n:::\n\n\n\nThere are only 2 Sex groups - Male and Female\n\n## Time Column Count\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(sgResData24,Time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 2\n   Time     n\n  <dbl> <int>\n1  2024 60424\n```\n\n\n:::\n:::\n\n\n\nThere is only 1 unique group for time, the year 2024, for all the rows in the dataset\n:::\n\n::: callout-note\n## üßêObservations and notes for this dataset\n\n-   There are 60,424 rows and 6 columns of data.\n\n-   There are no duplicate rows/ values\n\n-   Column Definition and Unique Values Count 6 Columns (5 Group and 1 Count):\n\n    -   **PA** (chr type) - Planning Area (55 unique)\n\n    -   **SZ** (chr type) - Subzone (332 unique)\n\n    -   **Age** (chr type) - Age of Residents (Values: 1 to 89, 90_and_Over)\n\n    -   **Sex** (chr type) - Sex (2 unique)\n\n    -   **Time** (dbl type) - Time/ Period (1 unique)\n\n    -   **Pop** (dbl type) - Resident Count\n:::\n\n## Transforming and Aggregating Age Column\n\nAge column is a chr type column (with \"90_and_Over\" as one of the values in this column). From the Age column create 2 new columns so that we can use them for our data visualisations later on:\n\n-   Age_num - introduced column that transforms the data type of the Age column from chr type to dbl type. Additionally, \"90_and_Over\" is converted to the value 90.\n\n-   Age_group - aggregating the age groups of the population together using 10 year intervals\n\nThis is performed using the mutate() and case_when() functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgResData24 <- sgResData24 %>%\n  mutate(\n    # Convert age to numeric, handle \"90_and_Over\"\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ suppressWarnings(as.numeric(Age))  # Avoid warnings from \"90_and_Over\"\n    ),\n    \n    # Group into age bands\n    Age_group = case_when(\n      Age_num >= 0 & Age_num <= 9   ~ \"0-9\",\n      Age_num >= 10 & Age_num <= 19 ~ \"10-19\",\n      Age_num >= 20 & Age_num <= 29 ~ \"20-29\",\n      Age_num >= 30 & Age_num <= 39 ~ \"30-39\",\n      Age_num >= 40 & Age_num <= 49 ~ \"40-49\",\n      Age_num >= 50 & Age_num <= 59 ~ \"50-59\",\n      Age_num >= 60 & Age_num <= 69 ~ \"60-69\",\n      Age_num >= 70 & Age_num <= 79 ~ \"70-79\",\n      Age_num >= 80 & Age_num <= 89 ~ \"80-89\",\n      Age_num >= 90                ~ \"90+\",\n      TRUE                         ~ NA_character_\n    )\n  )\n```\n:::\n\n\n\nWe can then check our adjusted dataset using the print() function below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60,424 √ó 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   <chr>      <chr>                  <chr> <chr>   <dbl> <dbl>   <dbl> <chr>    \n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ‚Ñπ 60,414 more rows\n```\n\n\n:::\n:::\n\n\n\n## Aggregate Planning Area (PA Column) into NSEW & Central Regions of Singapore\n\nReferencing the URA 2019 masterplan map, we can group the Planning Areas into the different North, South, East, West and Central regions of Singapore.\n\nWe reference this from the GEOJSON data obtained from this data.gov.sg website [link](https://data.gov.sg/collections/2104/view).\n\n\n### Extracting the Town(PA) and Region data from the GeoJSON file\n\nThe **sf** package is used here to help extract the spatial vector data from the GEOJSON data to extract the Town and Regions of Singapore.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Install required packages if not already installed\nlibrary(sf)\nlibrary(xml2)\nlibrary(dplyr)\n\n# Load the GeoJSON file\ngeo_data <- st_read(\"data/MasterPlan2019PlanningAreaBoundaryNoSea.geojson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MasterPlan2019PlanningAreaBoundaryNoSea' from data source \n  `C:\\NJYao\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex01\\data\\MasterPlan2019PlanningAreaBoundaryNoSea.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Function to parse HTML and extract PLN_AREA_N and REGION_N\nextract_info <- function(html_str) {\n  doc <- read_html(html_str)\n  rows <- xml_find_all(doc, \".//tr\")\n\n  # Loop through rows and extract key-value pairs\n  data <- lapply(rows, function(row) {\n    th <- xml_text(xml_find_first(row, \".//th\"))\n    td <- xml_text(xml_find_first(row, \".//td\"))\n    if (!is.na(th) && !is.na(td)) {\n      return(setNames(list(td), th))\n    } else {\n      return(NULL)\n    }\n  })\n\n  # Combine and extract specific fields\n  info <- do.call(c, data)\n  list(\n    Town = info[[\"PLN_AREA_N\"]],\n    Region = info[[\"REGION_N\"]]\n  )\n}\n\n\n# Apply the extraction function to each row\ninfo_list <- lapply(geo_data$Description, extract_info)\n\n# Combine results into a data frame\ninfo_df <- bind_rows(info_list) %>% distinct() %>% arrange(Region, Town)\n\n# View result\nprint(info_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 55 √ó 2\n   Town          Region        \n   <chr>         <chr>         \n 1 BISHAN        CENTRAL REGION\n 2 BUKIT MERAH   CENTRAL REGION\n 3 BUKIT TIMAH   CENTRAL REGION\n 4 DOWNTOWN CORE CENTRAL REGION\n 5 GEYLANG       CENTRAL REGION\n 6 KALLANG       CENTRAL REGION\n 7 MARINA EAST   CENTRAL REGION\n 8 MARINA SOUTH  CENTRAL REGION\n 9 MARINE PARADE CENTRAL REGION\n10 MUSEUM        CENTRAL REGION\n# ‚Ñπ 45 more rows\n```\n\n\n:::\n:::\n\n\n\nFrom the output of the above print(info_df), we have a 55x2 table of \"Town\" and \"Region\" which we can then use for joining with our sgResData24 dataset.\n\nTo prepare our data for joining we first transform our sgResData24 dataset's \"PA\" column data to uppercase to match the info_df dataset \"Town\" data for joining later\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgResData24 %>% mutate(PA = toupper(PA))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60,424 √ó 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   <chr>      <chr>                  <chr> <chr>   <dbl> <dbl>   <dbl> <chr>    \n 1 ANG MO KIO Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 ANG MO KIO Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 ANG MO KIO Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 ANG MO KIO Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 ANG MO KIO Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 ANG MO KIO Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 ANG MO KIO Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 ANG MO KIO Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 ANG MO KIO Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 ANG MO KIO Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ‚Ñπ 60,414 more rows\n```\n\n\n:::\n:::\n\n\n\nAdditionally, we rename the info_df dataset's \"Town\" column into \"PA\" using the **mutate()** function.\n\nWe can then perform a **left_join** of the sgResData24 \"PA\" column with the info_df dataset's \"PA\" column to introduce the Region Column into sgResData24 dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Rename Town to PA in the region info dataframe\nregion_info <- info_df %>% rename(PA = Town)\n\n# left join sgResData24 with region_info to get Region column\nsgResData24 <- sgResData24 %>% mutate(PA = toupper(PA)) %>%\n  left_join(region_info, by = \"PA\")\n\nprint(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60,424 √ó 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   <chr>      <chr>             <chr> <chr> <dbl> <dbl>   <dbl> <chr>     <chr> \n 1 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 0     Males    10  2024       0 0-9       NORTH‚Ä¶\n 2 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 0     Fema‚Ä¶    10  2024       0 0-9       NORTH‚Ä¶\n 3 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 1     Males    10  2024       1 0-9       NORTH‚Ä¶\n 4 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 1     Fema‚Ä¶    10  2024       1 0-9       NORTH‚Ä¶\n 5 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 2     Males    10  2024       2 0-9       NORTH‚Ä¶\n 6 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 2     Fema‚Ä¶    10  2024       2 0-9       NORTH‚Ä¶\n 7 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 3     Males    10  2024       3 0-9       NORTH‚Ä¶\n 8 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 3     Fema‚Ä¶    10  2024       3 0-9       NORTH‚Ä¶\n 9 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 4     Males    30  2024       4 0-9       NORTH‚Ä¶\n10 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 4     Fema‚Ä¶    10  2024       4 0-9       NORTH‚Ä¶\n# ‚Ñπ 60,414 more rows\n```\n\n\n:::\n:::\n\n\n\nThe output of print(sgResData24) shows the addition of the \"Region\" column.\n\nWe can perform the checks performed above to verify that the new columns introduced do not have any issues before proceeding with the visualisations.\n\n::: panel-tabset\n## Preview of the dataset\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60424     9\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 9\n  PA         SZ                 Age   Sex     Pop  Time Age_num Age_group Region\n  <chr>      <chr>              <chr> <chr> <dbl> <dbl>   <dbl> <chr>     <chr> \n1 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 0     Males    10  2024       0 0-9       NORTH‚Ä¶\n2 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 0     Fema‚Ä¶    10  2024       0 0-9       NORTH‚Ä¶\n3 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 1     Males    10  2024       1 0-9       NORTH‚Ä¶\n4 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 1     Fema‚Ä¶    10  2024       1 0-9       NORTH‚Ä¶\n5 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 2     Males    10  2024       2 0-9       NORTH‚Ä¶\n6 ANG MO KIO Ang Mo Kio Town C‚Ä¶ 2     Fema‚Ä¶    10  2024       2 0-9       NORTH‚Ä¶\n```\n\n\n:::\n:::\n\n\n\n## Descriptive Statistics\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time         Age_num    Age_group        \n Min.   :   0.0   Min.   :2024   Min.   : 0   Length:60424      \n 1st Qu.:   0.0   1st Qu.:2024   1st Qu.:22   Class :character  \n Median :  20.0   Median :2024   Median :45   Mode  :character  \n Mean   :  69.4   Mean   :2024   Mean   :45                     \n 3rd Qu.:  90.0   3rd Qu.:2024   3rd Qu.:68                     \n Max.   :1180.0   Max.   :2024   Max.   :90                     \n    Region         \n Length:60424      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n\n\n## Checking for duplicate values\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistinct(sgResData24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60,424 √ó 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   <chr>      <chr>             <chr> <chr> <dbl> <dbl>   <dbl> <chr>     <chr> \n 1 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 0     Males    10  2024       0 0-9       NORTH‚Ä¶\n 2 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 0     Fema‚Ä¶    10  2024       0 0-9       NORTH‚Ä¶\n 3 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 1     Males    10  2024       1 0-9       NORTH‚Ä¶\n 4 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 1     Fema‚Ä¶    10  2024       1 0-9       NORTH‚Ä¶\n 5 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 2     Males    10  2024       2 0-9       NORTH‚Ä¶\n 6 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 2     Fema‚Ä¶    10  2024       2 0-9       NORTH‚Ä¶\n 7 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 3     Males    10  2024       3 0-9       NORTH‚Ä¶\n 8 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 3     Fema‚Ä¶    10  2024       3 0-9       NORTH‚Ä¶\n 9 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 4     Males    30  2024       4 0-9       NORTH‚Ä¶\n10 ANG MO KIO Ang Mo Kio Town ‚Ä¶ 4     Fema‚Ä¶    10  2024       4 0-9       NORTH‚Ä¶\n# ‚Ñπ 60,414 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n# Data Visualisation\n\n## Population Pyramid Plot Visualisation\n\nPlotting Age Group against the Population Count using a population pyramid\n\nThe **ggplot** and **dplyr** library will be used for this visualisation.\n\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values for each group in the population pyramid using mutate(), summarise() and group_by() functions. Then we set the levels for the Age_groups so that the axis labels will be ordered in ascending order. The Pop values for the Males then have to be flipped into -ve values by using the **mutate()** and **ifelse()** functions.\n\nThe population pyramid is then plot using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as defining the fill to show segregate the plot by Sex.There are also data labels added for the % of total population and count for each group of the pyramid plot.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# Summarise and compute values\npop_pyramid <- sgResData24 %>%\n  group_by(Age_group, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  group_by(Sex) %>%\n  mutate(Percent = Pop / sum(Pop) * 100) %>%\n  ungroup()\n\n# Order Age_group for proper vertical alignment\nage_levels <- c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90+\")\npop_pyramid$Age_group <- factor(pop_pyramid$Age_group, levels = age_levels)\n\n# Flip male values to negative\npop_pyramid <- pop_pyramid %>%\n  mutate(Pop_plot = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = paste0(comma(abs(Pop)), \"\\n(\", round(abs(Percent), 1), \"%)\"))\n\n# Plot\nggplot(pop_pyramid, aes(x = Age_group, y = Pop_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, position = \"identity\") +\n  coord_flip() +\n  geom_text(aes(label = Label),\n            position = position_nudge(y = ifelse(pop_pyramid$Sex == \"Males\", -70000, 10000)),\n            hjust = ifelse(pop_pyramid$Sex == \"Male\", 1, 0),\n            size = 2.5, color = 'black') +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  scale_fill_manual(values = c(\"Males\" = \"#619CFF\", \"Females\" = \"#F8766D\")) +\n  labs(title = \"Singapore 2024 Population Pyramid\",\n       subtitle = \"                                    Males                                                          Females\",\n       x = \"Age Group\", y = \"Population Count\") +\n  theme_minimal()+\n  theme(\n    plot.margin = margin(10, 20, 20, 20),  # top, right, bottom, left\n    legend.position = \"none\")\n```\n:::\n\n\n:::\n\n### Observation from the Plot\n\nFrom the population pyramid chart, we can observe that the Age group of 30-39 has the largest population (14.9% + 15.4% of the overall population), and the largest population for both males and females respectively as well.\n\nWe can also observe an aging population based on the shape of the population pyramid chart, with the 0-9, 10-19 and 20-29 Age group populations being lesser than the 30-39 Age group.\n\n## Bar Chart Visualisation of Region vs Population and Sex\n\nPlotting Region vs Population and Sex.\n\nThe **ggplot** and **dplyr** library will be used for this visualisation.\n\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values (the % and total group count) for each group in the bar chart using mutate(), summarise() and group_by() functions.\n\nThe bar chart is then plotted using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as the addition of the total count and percentages for Males and Females within each group.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Compute total population by Region and Sex\nstacked_data_region <- sgResData24 %>%\n  group_by(Region, Sex) %>%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %>%\n  group_by(Region) %>%\n  mutate(Percent = Pop / sum(Pop) * 100)\n\n#Compute total population for each Region group (for total label)\nlabels_data_region <- stacked_data_region %>%\n  group_by(Region) %>%\n  summarise(Pop = sum(Pop))\n\n#Plot stacked bars with percent labels inside and total on top\n  ggplot(stacked_data_region, aes(x = Region, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Percent), \"%\")), \n            position = position_stack(vjust = 0.5), size = 3, color = \"white\") +\n  geom_text(data = labels_data_region, aes(x = Region, y = Pop, label = comma(Pop)), \n            vjust = -0.5, size = 3, inherit.aes = FALSE) +\n  labs(x = \"Region\", y = \"Population\", title = \"Population vs Region & Sex\") +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels and adjust alignment\n  )\n```\n:::\n\n\n:::\n\n### Observation from the Plot\n\nFrom the Bar chart, we can observe that the North-East Region has the highest population, followed by the Central and then West region. Based on the percentages observed for all 5 regions, we can also tell that there are more Females than Male in the population, with Males having 48 to 49% and Females having 51 to 52%. It can also be observed that the West Region has a greater proportion of Females(52%) compared to Males(48%).\n\n## Half-eye + Box Plot Visualisation of Age vs Region\n\nPlotting the Distribution of Age vs Region\n\nThe **ggplot**, **dplyr** and **ggdist** library will be used for this visualisation.\n\nWe first calculate the mean for each group to label the weighted means in the visualisation (using Age_num and Pop as the weight).\n\nThe chart is then plotted using ggplot to plot a half-eye plot (together with ggdist) and boxplot together. The other respective packages are used to adjust the aesthetics of the plo such as ith the weighted mean calculated earlier indicated with a red point in each boxplot using geompoint(). Each Region group is also assigned a different colour to help differentiate each group visually.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggdist)\n\n# Compute weighted mean for each region\nmean_labels <- sgResData24 %>%\n  group_by(Region) %>%\n  summarise(mean_age = weighted.mean(Age_num, Pop))\n\n# Plot with mean labels\nggplot(sgResData24, aes(x = Region, y = Age_num, fill = Region)) +\n  stat_halfeye(\n    aes(weight = Pop, fill = Region),\n    adjust = 0.5,\n    width = 0.6,\n    justification = -0.3,\n    .width = 0,\n    point_colour = NA\n  ) +\n  geom_point (data = mean_labels, aes(x = Region, y = mean_age), shape = 20, size = 3, color = \"red\") +\n  geom_boxplot(\n    width = .12,\n    outlier.shape = NA,\n    alpha = 0.6\n  ) +\n  geom_text(\n    data = mean_labels,\n    aes(x = Region, y = mean_age, label = round(mean_age, 1)),\n    #vjust = -0.8,\n    hjust = 1.5,\n    color = \"red\",\n    fontface = \"bold\",\n    size = 3\n  ) +\n  scale_y_continuous(breaks = seq(0, max(sgResData24$Age_num), by = 10))+ \n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n  ) +\n  labs(x = \"Region\", y = \"Age\", title = \"Distribution of Age vs Region\")\n```\n:::\n\n\n:::\n\n::: callout-important\n## Use The Correct Data Variable with Correct Data Type\n\nUse Age_num (dbl type) instead of Age (chr type) for this Distribution plot\n:::\n\n### Observation from the Plot\n\nWe can view that the distribution of the age of the population across the region is the same, with roughly the same median as well based on the boxplot median position. However, it can be observed that the mean age are different for each region, with Central having the highest(44.1), followed by East(42.6) and West(41.6). The higher mean in Central Region may indicate a greater proportion of older people living in these areas compared to other Regions.\n\nThis can also be observed from the distribution seen with the half-eye plot, where the end of the distribution graph shows a higher distribution of population above the age of around 80 compared to the other regions as shown in the screenshot below:\n\n![](images/clipboard-2232811106.png){width=\"509\"}\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}