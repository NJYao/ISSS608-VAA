[
  {
    "objectID": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 03",
    "section": "",
    "text": "Following the Mini-Challenge 1 from the VAST Challenge 2025 and the dataset provided for this mini-challenge:\nA local journalist, Silas Reed, is writing a feature titled Oceanus Folk: Then-and-Now to trace the rise of Sailor and the influence of Oceanus Folk on the global music scene. He has compiled a large dataset of musical artistes, producers, albums, songs, and influence relationships into a knowledge graph. The task is to assist Silas by developing informative and visually compelling data visualizations to uncover insights about Sailor’s background, her ascent to stardom, and her impact on the music industry."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#background",
    "href": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#background",
    "title": "Take Home Exercise 03",
    "section": "",
    "text": "Following the Mini-Challenge 1 from the VAST Challenge 2025 and the dataset provided for this mini-challenge:\nA local journalist, Silas Reed, is writing a feature titled Oceanus Folk: Then-and-Now to trace the rise of Sailor and the influence of Oceanus Folk on the global music scene. He has compiled a large dataset of musical artistes, producers, albums, songs, and influence relationships into a knowledge graph. The task is to assist Silas by developing informative and visually compelling data visualizations to uncover insights about Sailor’s background, her ascent to stardom, and her impact on the music industry."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#introduction",
    "href": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#introduction",
    "title": "Take Home Exercise 03",
    "section": "Introduction",
    "text": "Introduction\nIn this exercise, we will be proposing the development of an R Shiny dashboard to visualize relationships and influences among artistes, albums, and songs, with a specific focus on Sailor Shift and the Oceanus Folk genre. The dashboard will enable users to explore the evolving influence of Sailor and other artistes through interactive network and time-based visualizations.\nThis dashboard tool will help users, such as Silas, to effectively transform the raw relational data to visualize the relationships and links between different artistes. The user will be able to use this tool to hypothesize about trends in the music industry and forecast future developments based on the influence pathways."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#methodology",
    "href": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#methodology",
    "title": "Take Home Exercise 03",
    "section": "Methodology",
    "text": "Methodology\nTo meet user needs, the dashboard will include features that highlight relevant interactions within the dataset.\nThe MC1 dataset used comprises of nodes (such as Persons, MusicalGroups, Songs, Albums) and the edges (such as PerformerOf, LyricistOf, InStyleOf) showing the interaction between the nodes.\nThe development steps will include:\n\nData Extraction - Separating the MC1 json dataset into the node and edge components\nData Cleaning - To ensure consistency and validity of identifiers, timestamps and relationships\nTransformation and Modelling - Adjusting the data type if needed, processing the data to make it usable for visualizations and interactions\nVisualizations - Creating modules for the Shiny App that represent the following:\n\nInfluence pathways using a network graph\nTime Based Influence\nNotable Song Contributions"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#storyboard",
    "href": "Take-home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#storyboard",
    "title": "Take Home Exercise 03",
    "section": "Storyboard",
    "text": "Storyboard\nThe Shiny application will feature a sidebar layout, with a module selection panel and module specific filters on the left. The selected visualization from each module will be displayed in the main panel. The application will consist of three primary modules. For each of these modules, interactive features are introduced to allow the user to filter the data, review the graphs and obtain more information from points of interest from the visualizations.\n\nModule 1: Influence Network Graph\nWith this visualization, the user can view how the different artistes are influenced by one another based on their interactions through a network graph placed on the bottom of the main panel, which will allow the user to connect one artiste to another through the network graph. To further display the measure of influence of a artiste or musical group, the betweenness of the artiste or musical group is visualized with a bar graph to show the top 10 artiste or musical group by the betweenness measure.\nThe filters for this module will include the Artiste of interest, the Genre of music, the direction of influence and the number of “hops” of the network graph to control how far the influences should be visualized. This will allow the user to filter what he/she is interested in and filter accordingly for a visualization of the data of interest.\n\nThe network graph will also have interactivity with it such that the user can select nodes on the visualisation and the nodes linked to the selected node will be highlighted. Another interactive feature is that hovering over the nodes or edges will display the information of the edge type, and for the nodes more detailed information will be displayed similar to the example shown below\n\n\n\n\n\n\nExample of Highlight and Hover feature\n\n\n\nWhen the node Melancholy Circuitry is clicked, the nearby nodes and edges linked to it are highlighted as well. Additionally by hovering over the node, information on the node is displayed on it.\n\n\n\n\nModule 2: Timeline of Influence\nIn this Second module, the influence over time is shown utilizing a composite line and bar chart, with the line chart showing the cumulative influences and the bar charts showing the yearly influences.\nThe filters on the right show the filters available for the user for this module which are the Artiste of interest, Genre, and the Year. These filters will allow the user to view the influences based on a combination of the artiste of interest and the genre.\nAdditionally, the years of influence can be adjusted by the slider to adjust the number of years to be displayed on the visualization to better have a overall picture of the trend, or to zoom in on specific time periods.\n\n\n\n\n\n\n\nExample of Hovering Feature\n\n\n\nInteractivity is also introduced in this graph where hovering over certain points of the line graph will display the year and cumulative count of influences as shown in the example below for they year 2030.\n\n\n\n\n\nModule 3: Notable Song Counts\nIn the 3rd module, a bar chart showing the top 15 most influential artistes based on the number of notable songs attributed to them.\nBelow this bar chart is a table showing the breakdown of the song genres and count of them who were influence by the artiste of interest selected.\nThe filters for this module are the artiste of interest, the genre and the year. This will allow the user to select the artiste of interest, and we will be able to view who among the most influential artistes were influence by the artiste of influence. Such in the case of Sailor Shift, the user can filter and find out who was influenced by Sailor Shift and has the most number of notable songs, which could be a indication of said artiste’s climb to popularity. The genre filter will enable the user to filter by the genre of music and the year slider filter will also enable the user to visualize the person and the notable song counts within a certain time period."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "FYI\n\n\n\nFor this Take-home Exercise 2, my group members (Andre, Hendra) and I have decided to do Mini-Challenge 1. Through our discussion (and the help of a wheel randomizer), we split the challenge’s questions amongst ourselves. I will be doing question 1, Hendra will be doing question 2 and Andre will be doing question 3."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#background",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#background",
    "title": "Take Home Exercise 2",
    "section": "Background",
    "text": "Background\nFollowing the Mini-Challenge 1 from the VAST Challenge 2025( https://vast-challenge.github.io/2025/MC1.html) and the dataset obtained from this mini-challenge:\nA local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\nThe task is to design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career:\n1.  Who has she been most influenced by over time?\n\n2.  Who has she collaborated with and directly or indirectly influenced?\n\n3.  How has she influenced collaborators of the broader Oceanus Folk community?"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#loading-libraries",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#loading-libraries",
    "title": "Take Home Exercise 2",
    "section": "Loading Libraries",
    "text": "Loading Libraries\n\npacman::p_load(tidyverse, jsonlite, \n               SmartEDA, tidygraph, \n               ggraph,dplyr,igraph, \n               visNetwork,RColorBrewer,\n               htmltools)\n\nNote that the following tidyverse packages are used as well: stringr, lubridate, tidyr\n\n\n\n\n\n\nImportant\n\n\n\nYou are required to install the R packages above, if necessary, before continue to the next step Check packages to ensure they are installed"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#loading-data-and-initial-exploratory-data-analysis",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#loading-data-and-initial-exploratory-data-analysis",
    "title": "Take Home Exercise 2",
    "section": "Loading Data and Initial Exploratory Data Analysis",
    "text": "Loading Data and Initial Exploratory Data Analysis\n\nLoading the JSON Raw Data\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nCheck the structure of the data\n\nstr(kg,max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n# structure enable to check structure of the data\n# good to have this line to check structures of data\n\n\n\nExtract and inspect the nodes and edges\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\nInitial Exploratory Data Analysis (EDA)\n\nChecking Types and the Counts in Nodes and Edges\nUsing the code blocks below we can check the types and counts of the edges and nodes in the dataset:\n\n\nCode\nggplot(data = nodes_tbl,\n       aes(y= `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y= `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nChecking dimensions of the Nodes and Edges:\n\ndim(nodes_tbl)\n\n[1] 17412    10\n\ndim(edges_tbl)\n\n[1] 37857     4\n\n\n\n\nGlimpse of Nodes and Edges\nTo have a quick overview and sample of the data and data type of each variable in the nodes_tbl and edges_tbl:\n\nglimpse(nodes_tbl)\n\nRows: 17,412\nColumns: 10\n$ `Node Type`    &lt;chr&gt; \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           &lt;chr&gt; \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         &lt;lgl&gt; TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   &lt;chr&gt; \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          &lt;chr&gt; \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        &lt;lgl&gt; TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\nglimpse(edges_tbl)\n\nRows: 37,857\nColumns: 4\n$ `Edge Type` &lt;chr&gt; \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      &lt;int&gt; 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\nChecking the number of unique ids and rows in nodes_tbl\n\n\nCode\ncat(\"Count of Unique node IDs:\", n_distinct(nodes_tbl$id),\"\\n\")\n\n\nCount of Unique node IDs: 17412 \n\n\nCode\ncat(\"Count of node rows:\", n_distinct(nodes_tbl$id))\n\n\nCount of node rows: 17412\n\n\neach ID is unique since the number of unique IDs and number of rows in nodes_tbl are the same\n\n\nChecking the number of unique ids for the source and target column in edges_tbl\n\n\nCode\n#Edges Checking number of unique ids\ncat(\"Count of Unique IDs in source:\",n_distinct(edges_tbl$source),\"\\n\")\n\n\nCount of Unique IDs in source: 16042 \n\n\nCode\ncat(\"Count of Unique IDs in target:\",n_distinct(edges_tbl$target))\n\n\nCount of Unique IDs in target: 6040\n\n\n\n\nCheck if all source/target IDs in edges_tbl exist in nodes_tbl IDs\n\n\nCode\n# Check if all source/target IDs exist in nodes_tbl\nnodes_ids &lt;- nodes_tbl$id\ninvalid_source_ids &lt;- edges_tbl %&gt;% filter(!(source %in% nodes_ids)) %&gt;% pull(source) %&gt;% unique()\ninvalid_target_ids &lt;- edges_tbl %&gt;% filter(!(target %in% nodes_ids)) %&gt;% pull(target) %&gt;% unique()\n\n\nif (length(invalid_target_ids) &gt; 0) {\n  cat(\"Warning: Found\", length(invalid_target_ids), \"target IDs not present in nodes_tbl (e.g.,\", head(invalid_target_ids, 5), \").\\n\")\n} else {\n  cat(\"All 'target' IDs are present in nodes_tbl.\\n\")\n}\n\n\nAll 'target' IDs are present in nodes_tbl.\n\n\nCode\nif (length(invalid_source_ids) &gt; 0) {\n  cat(\"Warning: Found\", length(invalid_source_ids), \"source IDs not present in nodes_tbl (e.g.,\", head(invalid_source_ids, 5), \").\\n\")\n} else {\n  cat(\"All 'source' IDs are present in nodes_tbl.\\n\")}\n\n\nAll 'source' IDs are present in nodes_tbl.\n\n\n\n\nChecking on the distribution of genres within node_tbl dataset\n\n\nCode\nprint(nodes_tbl %&gt;% count(genre, sort = TRUE, name = \"count\") %&gt;%\n          mutate(percentage = (count / sum(count)) * 100) %&gt;% head(10))\n\n\n# A tibble: 10 × 3\n   genre                count percentage\n   &lt;chr&gt;                &lt;int&gt;      &lt;dbl&gt;\n 1 &lt;NA&gt;                 12801      73.5 \n 2 Dream Pop              742       4.26\n 3 Indie Folk             450       2.58\n 4 Synthwave              382       2.19\n 5 Doom Metal             348       2.00\n 6 Oceanus Folk           305       1.75\n 7 Alternative Rock       258       1.48\n 8 Southern Gothic Rock   242       1.39\n 9 Indie Rock             208       1.19\n10 Americana              184       1.06\n\n\n\n\nChecking on the distribution of notable within node_tbl dataset\n\n\nCode\nnodes_tbl %&gt;% count(notable, sort = TRUE, name = \"count\") %&gt;%\n          mutate(percentage = (count / sum(count)) * 100)\n\n\n# A tibble: 3 × 3\n  notable count percentage\n  &lt;lgl&gt;   &lt;int&gt;      &lt;dbl&gt;\n1 NA      12801      73.5 \n2 TRUE     4297      24.7 \n3 FALSE     314       1.80\n\n\n\n\n\nPreparation for visNetwork\n\nDefining and Standardizing Node and Edge Colors\nIn order to ensure the graphs generated later on have standardized colors. We will need to define them in this code block here:\n\n\nCode\nall_node_type_colors &lt;- c(\n  \"Song\" = \"#FF5733\",\n  \"Album\" = \"lightblue\",\n  \"Person\" = \"deepskyblue\",\n  \"MusicalGroup\" = \"purple\",\n  \"RecordLabel\" = \"lightgreen\",\n  \"Unknown\" = \"gray\"\n)\n\nall_edge_type_colors &lt;- c(\n  \"PerformerOf\" = \"#FF5733\", \"ComposerOf\" = \"#33FF57\", \"ProducerOf\" = \"#3357FF\",\n  \"LyricistOf\" = \"#FF33F5\", \"RecordedBy\" = \"#F5FF33\", \"InterpolatesFrom\" = \"#8A2BE2\",\n  \"InStyleOf\" = \"#DAA520\", \"LyricalReferenceTo\" = \"#5F9EA0\", \"CoverOf\" = \"#DC143C\",\n  \"DirectlySamples\" = \"#6A5ACD\", \"DistributedBy\" = \"#20B2AA\", \"MemberOf\" = \"#8B4513\",\n  \"default\" = \"#CCCCCC\"\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#visnetwork-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#visnetwork-graph",
    "title": "Take Home Exercise 2",
    "section": "visNetwork graph",
    "text": "visNetwork graph\nWith the use of a network graph generated using visNetwork, we will be visualising the interactions and influences centering around Sailor Shift.\n\nSet filter for Sailor Shift\n\n\nCode\ntarget_name &lt;- \"Sailor Shift\"\n\n\n\n\nSelect target node ID\n\n\nCode\n# --- Get target node ID ---\nsailor_node &lt;- nodes_tbl %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n\n\n\nvisNetwork graph to explore Sailor Shift Interactions with Persons or Musical Groups\nable to see that a cluster of them are linked to sailor shift - dive deeper in following graphs\n\nHelper function for HTML tooltips\nThis function is to help with the tooltips and show details when selecting or hovering over the nodes or edges in our visNetwork graphs. This will enable us to show the name of the nodes and edges. For Nodes, additional details such as the year,\n\n\nCode\n# Helper function for HTML details in tooltips\nget_html_detail &lt;- function(value, label) {\n  if (!is.null(value) && !is.na(value) && as.character(value) != \"\") {\n    return(paste0(\"&lt;b&gt;\", label, \":&lt;/b&gt; \", as.character(value), \"&lt;br&gt;\"))\n  }\n  return(\"\")\n}\n\n\n\n\nEdge Filtering\nSince we are exploring interactions between persons and musical groups, we will limit and filter the edges that are only between persons and musical groups. This will later be used in our network graph for analysis. The filtering is shown in the code block below:\n\n\nCode\n# --- Define the specific edge types for this new visualization ---\ndesired_edge_types_for_group_interactions &lt;- c(\n  \"InterpolatesFrom\",\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"LyricalReferenceTo\",\n  \"MemberOf\"\n)\n\n\n\n\nData Cleaning\n\n\nCode\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  mutate(id = trimws(id)) %&gt;%\n  filter(!is.na(id) & id != \"\") %&gt;%\n  mutate(`Node Type` = trimws(ifelse(is.na(`Node Type`), \"Unknown\", as.character(`Node Type`)))) %&gt;%\n  distinct(id, .keep_all = TRUE)\n\n# Add missing columns with NA if they don't exist\nif (!\"stage_name\" %in% names(nodes_tbl_cleaned)) nodes_tbl_cleaned$stage_name &lt;- NA_character_\nif (!\"release_date\" %in% names(nodes_tbl_cleaned)) nodes_tbl_cleaned$release_date &lt;- NA_character_\nif (!\"genre\" %in% names(nodes_tbl_cleaned)) nodes_tbl_cleaned$genre &lt;- NA_character_\nif (!\"notable\" %in% names(nodes_tbl_cleaned)) nodes_tbl_cleaned$notable &lt;- NA\n\n\n\n# Get target node ID\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found in cleaned data.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n\n\n\nvisNetwork Edges preparation\nFor visNetwork, we will need to rename the “source” and “target” from edges_tbl into “from” and “to” to be able to be used:\n\n\nCode\n# Prepare edges for igraph and visNetwork\nedges_df_processed &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  filter(source %in% nodes_tbl_cleaned$id & target %in% nodes_tbl_cleaned$id) %&gt;%\n  rename(from = source, to = target)\n\n\nThis code block will mainly: - Filter the edges to include only the desired interaction types - Identify all nodes connected by these specific edges - Filter the “MusicalGroup” and “Person” nodes that are within this specific interaction - Preparing the Nodes and Edges for visualization\n\n\nCode\nrelevant_edges_for_group_interactions &lt;- edges_df_processed %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_for_group_interactions)\n\n\nnodes_connected_by_specific_edges &lt;- unique(c(relevant_edges_for_group_interactions$from, relevant_edges_for_group_interactions$to))\n\n\ntarget_group_node_ids &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% nodes_connected_by_specific_edges) %&gt;%\n  filter(`Node Type` %in% c(\"MusicalGroup\", \"Person\")) %&gt;%\n  pull(id)\ntarget_group_node_ids &lt;- unique(c(target_group_node_ids, sailor_id))\n\n# Prepare the final nodes for the visualization\n# addition of differnt color to differentiate Sailor Shift, increasing node size.\nnodes_for_new_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% target_group_node_ids) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      get_html_detail(stage_name, \"Stage Name\"),\n      get_html_detail(release_date, \"Release Date\"),\n      get_html_detail(genre, \"Genre\"),\n      get_html_detail(notable, \"Notable\")\n    ),\n    group = `Node Type`,\n    size = ifelse(id == sailor_id, 30, 20), # Increase size of sailor shift node\n    color = ifelse(id == sailor_id, \"gold\", NA) # Only Sailor Shift gets a custom color\n  ) %&gt;%\n  ungroup()\n\n# Prepare the final edges for the visualization\nedges_for_new_vis &lt;- relevant_edges_for_group_interactions %&gt;%\n  filter(from %in% nodes_for_new_vis$id & to %in% nodes_for_new_vis$id) %&gt;%\n  mutate(\n    label = `Edge Type`,\n    title = `Edge Type`,\n    arrows = \"to\",\n    color = recode(`Edge Type`, !!!all_edge_type_colors, .default = all_edge_type_colors[\"default\"])\n  )\n\n\n\n\nPlotting with visNetwork Plot\nThe code chunk below will be to generate the visNetwork plot\n\n\nCode\n# Create the visNetwork plot\ngraph_group_interactions &lt;- visNetwork(nodes = nodes_for_new_vis, edges = edges_for_new_vis,\n                                       main = paste0(\"Interactions of '\", target_name, \"' with Musical Groups and Persons\")) %&gt;%\n  visNodes(\n    color = list(\n      background = ~color,\n      border = \"black\",\n      highlight = list(background = \"red\", border = \"darkred\"),\n      hover = list(background = \"lightgray\", border = \"darkgray\")\n    ),\n    shadow = TRUE,\n    font = list(size = 12),\n    shape = \"dot\"\n  ) %&gt;%\n  visEdges(\n    color = list(color = ~color, highlight = ~color),\n    smooth = TRUE,\n    shadow = TRUE,\n    font = list(size = 10, align = \"middle\")\n  ) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE, selected = sailor_id),\n    selectedBy = \"group\"\n  )\n\n# Add legends and layout\ngraph_group_interactions &lt;- graph_group_interactions %&gt;%\n  visLegend(\n    main = \"Node Types\",\n    useGroups = TRUE,\n    position = \"left\",\n    width = 0.15\n  ) %&gt;%\n  visInteraction(\n    navigationButtons = TRUE,\n    keyboard = TRUE\n  ) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)\n\n# Save and display\nvisSave(graph_group_interactions, file = paste0(target_name, \"_group_interactions_with_sailor_shift_highlighted.html\"))\n\ngraph_group_interactions\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nWhen looking at the edges that are linked to Sailor Shift directly or indirectly through other person or musical group nodes, it can be seen that o a group of person or musical nodes are linked or influenced to Sailor Shift. From here we will dive deeper into the person or groups which are influenced by her.\n\n\n\n\n\nvisNetwork graph to explore Sailor Shift Interactions without “Edge Types” and Node Filtering\n\nPreparing edges df for visnetwork and filter Sailor Shift\n\n\nCode\n# Prepare edges_igraph_df for filtering and visNetwork\nedges_igraph_df &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  rename(from = source, to = target) # Rename to from/to for visNetwork\n\n\n\n\ndata preparation for visNetwork\nWe will be building an igraph to filter for the neighbourhood (Other nodes which are linked to Sailor Shift) with the code chunk below:\n\n\nCode\n# Build igraph for neighborhood calculation\ng &lt;- graph_from_data_frame(edges_igraph_df, directed = FALSE)\n\n\nNext, we limit the “hops” or number of linkages from Sailor Shift so that the graph generated does not include too many nodes linked to Sailor Shift and prevent slow loading with the code chunk below:\n\n\nCode\n# Get N-hop neighborhood for general context\nmax_hops_for_context &lt;- 2 \nego_nodes_indices &lt;- ego(graph = g, order = max_hops_for_context, nodes = sailor_id, mode = \"all\")[[1]]\nconnected_ids_general &lt;- names(ego_nodes_indices)\n\n\nWe will now filter the nodes to exclude those which are not linked to Sailor Shift and only include those in a network with her with the code chunk below:\n\n\nCode\n# Filter nodes for the general context subgraph\nsub_nodes_general &lt;- nodes_tbl %&gt;%\n  filter(as.character(id) %in% connected_ids_general) %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    stage_name_str = if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n    release_date_str = if_else(!is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n    # Include genre information for the tooltip\n    genre_str = if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n    notable_str = if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\"),\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      genre_str, # Add genre to the tooltip\n      stage_name_str,\n      release_date_str,\n      notable_str\n    ),\n    group = `Node Type`,\n    # --- ADD THIS LINE TO CONTROL NODE SIZE ---\n    size = ifelse(id == sailor_id, 50, 15) # Sailor Shift size 50, others 15\n  ) %&gt;%\n  select(-stage_name_str, -release_date_str, -genre_str, -notable_str)\n\n\nWe will now filter the edges and set the edge colors to the global edge colors which was set at the beginning:\n\n\nCode\n# Filter edges for the general context subgraph and add color\nsub_edges_general &lt;- edges_igraph_df %&gt;%\n  filter(from %in% sub_nodes_general$id & to %in% sub_nodes_general$id) %&gt;%\n  mutate(color = all_edge_type_colors[`Edge Type`])\nsub_edges_general$color[is.na(sub_edges_general$color)] &lt;- all_edge_type_colors[\"default\"]\n\n\n\n\n\nGenerating visNetwork graph for exploration\n\n\nCode\n# Visualize General Context Network\ngraph_general_context &lt;- visNetwork(nodes = sub_nodes_general, edges = sub_edges_general,\n                                    main = paste0(\"'\", target_name, \"' Interaction Network (\", max_hops_for_context, \"-hops)\")) %&gt;%\n  visNodes(shape = \"dot\", size = 15, label = ~label, title = ~title) %&gt;%\n  visEdges(\n    arrows = \"to\",\n    label = ~`Edge Type`,\n    font = list(size = 10, align = \"middle\"),\n    color = list(color = ~color, highlight = ~color)\n  ) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = list(enabled = TRUE, selected = sailor_id))\n\ngraph_general_context &lt;- graph_general_context %&gt;%\n  visLegend(\n    main = \"Node Types\",\n    useGroups = TRUE,\n    position = \"left\",\n    width = 0.15\n  ) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42) %&gt;%\n  visOptions(selectedBy = \"group\", \n             highlightNearest = TRUE, \n             nodesIdSelection = TRUE)\n\ngraph_general_context\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the network graph above, we can see that there are edges connecting directly to Sailor Shift, indicating a direct influence to/from her. However, there are also cases where other nodes are connected by edges connecting to Songs or Albums linked to Sailor Shift, indicating a indirect influence to/from her."
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#final-visualization-tool-to-assist-silass-exploration-and-analysis",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/Take-home_Ex02.html#final-visualization-tool-to-assist-silass-exploration-and-analysis",
    "title": "Take Home Exercise 2",
    "section": "Final visualization Tool to Assist Silas’s exploration and analysis",
    "text": "Final visualization Tool to Assist Silas’s exploration and analysis\nFrom the previous graph, the following improvements will be made:\n\nIncrease visOptions degree for highlighting when clicking or hovering a node from 1 to 2 - to improve the visibility of indirect linkages between Sailor Shift and other Person/MusicalGroups\nTo introduce inferred genre for a Person/MusicalGroup\nTo improve clarify, we will be generating 2 graphs using:\n\nOutward directed edges - who Sailor Shift, her songs or albums was influenced by\nInward directed edges - who Sailor Shift, her songs or albums has influenced. -\n\nSongs and albums which are notable will be represented by a star shape instead\nUsed gradient colors for song and album to help visualize the release_year of the song/ album (Darker for more recent years and lighter for older)\nAdded adjustment to node sizes(other than Sailor Shift) using the degree for each node to represent how connected a certain node is.\nDue to limitations for visNetwork to display gradient and multiple shapes + colors as legends for groups, a HTML generated legends will be generated and used with the network graphs.\n\n\nGetting Inferred Genres for Person/ MusicalGroup\nThe code block below will assist in retrieving the inferred genre of a Person or MusicalGroup based on the “PerformerOf”, “ComposerOf”, “ProducerOf”, “LyricistOf”, “RecordedBy” edges linked to the Person or MusicalGroup.\nThis will be used in the tooltip and shows the genre of the Person or MusicalGroup node to help with analysis.\n\n\nCode\ngenre_inference_edge_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\", \"RecordedBy\")\n\nartiste_song_genre_links &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% genre_inference_edge_types) %&gt;%\n  inner_join(nodes_tbl_cleaned %&gt;% select(id, `Node Type`, genre),\n             by = c(\"to\" = \"id\")) %&gt;%\n  filter(`Node Type` == \"Song\") %&gt;% # Ensure the target node is a Song\n  select(artiste_id = from, song_genre = genre) %&gt;%\n  filter(!is.na(song_genre) & song_genre != \"\") # Only consider songs with a defined genre\n\ninferred_genres_for_artistes &lt;- artiste_song_genre_links %&gt;%\n  group_by(artiste_id) %&gt;%\n  summarise(\n    inferred_genre = paste(sort(unique(song_genre)), collapse = \", \"),\n    .groups = 'drop'\n  )\n\n\n\n\nWho was Influenced by Sailor Shift? - Inward Directed Graph\n\nPreparatory Code for the visNetwork graph\n\n\nCode\n# Global Definitions for inward and outward directed graph\ndesired_edge_types_to_display &lt;- c(\n  \"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\", \"RecordedBy\",\n  \"InterpolatesFrom\", \"InStyleOf\", \"LyricalReferenceTo\", \"CoverOf\",\n  \"DirectlySamples\", \"DistributedBy\", \"MemberOf\"\n)\n\n\nget_html_detail &lt;- function(row, col, label) {\n  value &lt;- row[[col]]\n  if (!is.null(value) && !is.na(value) && as.character(value) != \"\") {\n    return(paste0(\"&lt;b&gt;\", label, \":&lt;/b&gt; \", as.character(value), \"&lt;br&gt;\"))\n  }\n  return(\"\")\n}\n\n# Simulate missing data/variables for a runnable example\nif (!exists(\"inferred_genres_for_artistes\")) {\n  inferred_genres_for_artistes &lt;- tibble(\n    artiste_id = character(),\n    inferred_genre = character()\n  )\n}\n\nif (!exists(\"groups_for_visnetwork_combined\")) {\n  groups_for_visnetwork_combined &lt;- tibble(\n    id = names(all_node_type_colors),\n    color = all_node_type_colors\n  )\n}\nif (!exists(\"legend_edge_types_to_display\")) {\n  legend_edge_types_to_display &lt;- desired_edge_types_to_display[desired_edge_types_to_display %in% names(all_edge_type_colors)]\n}\n\n\n# Improved release_date parsing and year extraction\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  mutate(id = trimws(id)) %&gt;%\n  mutate(id = tolower(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  mutate(\n    release_date_parsed = suppressWarnings(parse_date_time(release_date, orders = c(\"ymd\", \"Ymd\", \"Y-m-d\", \"Y/m/d\", \"Y\"))),\n    release_year = ifelse(\n      !is.na(release_date_parsed),\n      year(release_date_parsed),\n      suppressWarnings(as.integer(str_extract(as.character(release_date), \"\\\\d{4}\")))\n    )\n  )\n\nif (\"Node Type\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(`Node Type` = trimws(`Node Type`))\n} else {\n  warning(\"Column 'Node Type' not found in nodes_tbl_cleaned. Node typing might be affected.\")\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;% mutate(`Node Type` = \"Unknown\")\n}\n\nif (!\"notoriety_date\" %in% names(nodes_tbl_cleaned) || all(is.na(nodes_tbl_cleaned$notoriety_date))) {\n  set.seed(456)\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(\n      temp_release_date = ymd(release_date, quiet = TRUE),\n      notoriety_date = if_else(\n        !is.na(temp_release_date) & sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.15, 0.85)),\n        temp_release_date + days(sample(30:365, n(), replace = TRUE)),\n        as.Date(NA)\n      ),\n      notoriety_year = year(notoriety_date)\n    ) %&gt;%\n    select(-temp_release_date)\n} else {\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(notoriety_year = suppressWarnings(as.integer(str_extract(as.character(notoriety_date), \"\\\\d{4}\"))))\n}\n\nif (!\"notable\" %in% names(nodes_tbl_cleaned)) {\n  set.seed(123)\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(notable = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.2, 0.8)))\n}\n\nif (!\"stage_name\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned$stage_name &lt;- NA_character_\n}\nif (!\"genre\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned$genre &lt;- NA_character_\n}\n\n# Identify Sailor Shift Node\ntarget_name &lt;- \"Sailor Shift\"\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(tolower(name) == tolower(target_name))\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found.\", sep=\"\"))\nsailor_id &lt;- sailor_node$id\n\nvalid_node_ids_set &lt;- unique(nodes_tbl_cleaned$id)\nedges_igraph_df &lt;- edges_igraph_df %&gt;%\n  filter(from %in% valid_node_ids_set & to %in% valid_node_ids_set)\n\n# Songs linked to Sailor Shift (direct edges)\nsailor_songs &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from == sailor_id | to == sailor_id) %&gt;%\n  mutate(target_id = ifelse(from == sailor_id, to, from)) %&gt;%\n  inner_join(nodes_tbl_cleaned, by = c(\"target_id\" = \"id\")) %&gt;%\n  filter(`Node Type` == \"Song\") %&gt;%\n  pull(target_id)\n\n# Albums linked to Sailor Shift (direct edges)\nsailor_albums &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from == sailor_id | to == sailor_id) %&gt;%\n  mutate(target_id = ifelse(from == sailor_id, to, from)) %&gt;%\n  inner_join(nodes_tbl_cleaned, by = c(\"target_id\" = \"id\")) %&gt;%\n  filter(`Node Type` == \"Album\") %&gt;%\n  pull(target_id)\n\n# Songs/albums that link to Sailor Shift's songs or albums\nlinked_in_targets &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         to %in% union(sailor_songs, sailor_albums)) %&gt;%\n  pull(from)\n\n# All songs + albums to include\nall_in_targets &lt;- union(union(sailor_songs, sailor_albums), linked_in_targets)\n\n# Contributors to those songs/albums\ncontributors_to_targets &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         to %in% all_in_targets)\n\n# Edges to Sailor Shift or her songs/albums\nedges_to_sailor &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         to == sailor_id | to %in% union(sailor_songs, sailor_albums))\n\n# Final inward edge set\nedges_inward_filtered &lt;- bind_rows(edges_to_sailor, contributors_to_targets) %&gt;%\n  distinct(from, to, `Edge Type`, key)\n\n# Final node set\ninward_ids &lt;- unique(c(edges_inward_filtered$from, edges_inward_filtered$to, sailor_id))\n\n# Gradient palettes for songs and albums\nsong_palette_func &lt;- colorRampPalette(brewer.pal(9, \"YlOrRd\"))   # Songs: yellow to red\nalbum_palette_func &lt;- colorRampPalette(brewer.pal(9, \"PuBuGn\"))  # Albums: purple to green/blue\n\nmin_song_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Song\" & id %in% inward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  min(na.rm = TRUE)\n\nmax_song_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Song\" & id %in% inward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  max(na.rm = TRUE)\n\nmin_album_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Album\" & id %in% inward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  min(na.rm = TRUE)\n\nmax_album_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Album\" & id %in% inward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  max(na.rm = TRUE)\n\nnodes_inward_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% inward_ids) %&gt;%\n  left_join(inferred_genres_for_artistes, by = c(\"id\" = \"artiste_id\")) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      get_html_detail(cur_data(), \"stage_name\", \"Stage Name\"),\n      get_html_detail(cur_data(), \"release_date\", \"Release Date\"),\n      get_html_detail(cur_data(), \"genre\", \"Genre (Node)\"),\n      get_html_detail(cur_data(), \"inferred_genre\", \"Genre (Inferred)\"),\n      get_html_detail(cur_data(), \"notable\", \"Notable\")\n    ),\n    group = `Node Type`,\n    size = case_when(\n      id == sailor_id ~ 60\n      # Other nodes will be set by degree below\n    ),\n    shape = case_when(\n      (`Node Type` %in% c(\"Song\", \"Album\")) & notable ~ \"star\",\n      TRUE ~ \"dot\"\n    ),\n    color.background = case_when(\n      id == sailor_id ~ \"gold\",\n      `Node Type` == \"Song\" & !is.na(release_year) ~ {\n        if (min_song_year == max_song_year) {\n          song_palette_func(1)[1]\n        } else {\n          scaled_year &lt;- (release_year - min_song_year) / (max_song_year - min_song_year)\n          scaled_year &lt;- pmax(0, pmin(1, scaled_year))\n          song_palette_func(100)[round(scaled_year * 99) + 1]\n        }\n      },\n      `Node Type` == \"Album\" & !is.na(release_year) ~ {\n        if (min_album_year == max_album_year) {\n          album_palette_func(1)[1]\n        } else {\n          scaled_year &lt;- (release_year - min_album_year) / (max_album_year - min_album_year)\n          scaled_year &lt;- pmax(0, pmin(1, scaled_year))\n          album_palette_func(100)[round(scaled_year * 99) + 1]\n        }\n      },\n      TRUE ~ unname(all_node_type_colors[as.character(`Node Type`)])\n    ),\n    color.background = ifelse(is.na(color.background), all_node_type_colors[\"Unknown\"], color.background),\n    color.border = \"black\",\n    color.highlight.background = \"red\",\n    color.highlight.border = \"darkred\",\n    color.hover.background = \"lightgray\",\n    color.hover.border = \"darkgray\"\n  ) %&gt;%\n  ungroup()\n\nedges_inward_final &lt;- edges_inward_filtered %&gt;%\n  filter(from %in% nodes_inward_vis$id & to %in% nodes_inward_vis$id) %&gt;%\n  group_by(from, to) %&gt;%\n  summarise(\n    aggregated_label = paste(sort(unique(`Edge Type`)), collapse = \", \"),\n    color = all_edge_type_colors[first(`Edge Type`)],\n    arrows = \"to\",\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(\n    label = aggregated_label,\n    title = aggregated_label,\n    color = ifelse(is.na(color), all_edge_type_colors[\"default\"], color)\n  )\n\n# Calculate degree for each node in the subgraph\ndegree_df &lt;- edges_inward_final %&gt;%\n  select(from, to) %&gt;%\n  pivot_longer(cols = c(from, to), values_to = \"id\") %&gt;%\n  count(id, name = \"degree\")\n\n# Optionally rescale for better visualization\nrescale &lt;- function(x, to = c(15, 150)) {\n  rng &lt;- range(x, na.rm = TRUE)\n  if (diff(rng) == 0) return(rep(mean(to), length(x)))\n  (x - rng[1]) / diff(rng) * diff(to) + to[1]\n}\ndegree_df$degree_scaled &lt;- rescale(degree_df$degree)\n\n# Join degree to nodes_inward_vis and update size\nnodes_inward_vis &lt;- nodes_inward_vis %&gt;%\n  left_join(degree_df, by = \"id\") %&gt;%\n  mutate(size = ifelse(id == sailor_id, 60, degree_scaled))\n\n\n\n\nRendering the ‘Influenced By’ Sailor Shift Network graph\n\n\nCode\ngraph_inward &lt;- visNetwork(nodes_inward_vis, edges_inward_final,\n                           main = paste0(\"'Influenced By' \",target_name,\" Network Graph\")) %&gt;%\n  visNodes(\n    color = list(\n      background = ~color.background,\n      border = \"black\",\n      highlight = list(background = \"red\", border = \"darkred\"),\n      hover = list(background = \"lightgray\", border = \"darkgray\")\n    ),\n    shadow = TRUE,\n    font = list(size = 12)\n    # Do NOT set size or shape here!\n  ) %&gt;%\n  visEdges(\n    arrows = \"to\",\n    label = ~label,\n    font = list(size = 10, align = \"middle\"),\n    title = ~title,\n    color = list(color = ~color, highlight = ~color),\n    smooth = list(enabled = TRUE, type = \"continuous\", roundness = 0.5),\n    width = 1\n  ) %&gt;%\n  visOptions(\n    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE, algorithm = \"hierarchical\"),\n    nodesIdSelection = list(enabled = TRUE, selected = sailor_id, useLabels = TRUE),\n    selectedBy = \"group\"\n  ) %&gt;%\n  {\n    vis_obj &lt;- .\n    for (i in 1:nrow(groups_for_visnetwork_combined)) {\n      vis_obj &lt;- vis_obj %&gt;%\n        visGroups(groupname = groups_for_visnetwork_combined$id[i],\n                  color = groups_for_visnetwork_combined$color[i])\n    }\n    vis_obj\n  } %&gt;%\n  visInteraction(navigationButtons = TRUE, keyboard = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 1234) %&gt;%\n  visPhysics(enabled = FALSE)\n\ngraph_inward\n\n\n\n\n\n\n\n\n\nWho Influenced Sailor Shift? - Outward Directed Graph\n\nPreparatory Code for the visNetwork graph\n\n\nCode\nget_html_detail &lt;- function(value, label) {\n  if (!is.null(value) && !is.na(value) && as.character(value) != \"\") {\n    return(paste0(\"&lt;b&gt;\", label, \":&lt;/b&gt; \", as.character(value), \"&lt;br&gt;\"))\n  }\n  return(\"\")\n}\n\n\n# --- Simulate missing data/variables for a runnable example ---\nif (!exists(\"inferred_genres_for_artistes\")) {\n  inferred_genres_for_artistes &lt;- tibble(\n    artiste_id = character(),\n    inferred_genre = character()\n  )\n}\n\nif (!exists(\"groups_for_visnetwork_combined\")) {\n  groups_for_visnetwork_combined &lt;- tibble(\n    id = names(all_node_type_colors),\n    color = all_node_type_colors\n  )\n}\nif (!exists(\"legend_edge_types_to_display\")) {\n  legend_edge_types_to_display &lt;- desired_edge_types_to_display[desired_edge_types_to_display %in% names(all_edge_type_colors)]\n}\n\n# --- Improved release_date parsing and year extraction ---\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  mutate(id = trimws(id)) %&gt;%\n  mutate(id = tolower(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  mutate(\n    release_date_parsed = suppressWarnings(parse_date_time(release_date, orders = c(\"ymd\", \"Ymd\", \"Y-m-d\", \"Y/m/d\", \"Y\"))),\n    release_year = ifelse(\n      !is.na(release_date_parsed),\n      year(release_date_parsed),\n      suppressWarnings(as.integer(str_extract(as.character(release_date), \"\\\\d{4}\")))\n    )\n  )\n\nif (\"Node Type\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(`Node Type` = trimws(`Node Type`))\n} else {\n  warning(\"Column 'Node Type' not found in nodes_tbl_cleaned. Node typing might be affected.\")\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;% mutate(`Node Type` = \"Unknown\")\n}\n\nif (!\"notoriety_date\" %in% names(nodes_tbl_cleaned) || all(is.na(nodes_tbl_cleaned$notoriety_date))) {\n  set.seed(456)\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(\n      temp_release_date = ymd(release_date, quiet = TRUE),\n      notoriety_date = if_else(\n        !is.na(temp_release_date) & sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.15, 0.85)),\n        temp_release_date + days(sample(30:365, n(), replace = TRUE)),\n        as.Date(NA)\n      ),\n      notoriety_year = year(notoriety_date)\n    ) %&gt;%\n    select(-temp_release_date)\n} else {\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(notoriety_year = suppressWarnings(as.integer(str_extract(as.character(notoriety_date), \"\\\\d{4}\"))))\n}\n\nif (!\"notable\" %in% names(nodes_tbl_cleaned)) {\n  set.seed(123)\n  nodes_tbl_cleaned &lt;- nodes_tbl_cleaned %&gt;%\n    mutate(notable = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.2, 0.8)))\n}\n\nif (!\"stage_name\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned$stage_name &lt;- NA_character_\n}\nif (!\"genre\" %in% names(nodes_tbl_cleaned)) {\n  nodes_tbl_cleaned$genre &lt;- NA_character_\n}\n\n# --- Identify Sailor Shift Node ---\ntarget_name &lt;- \"Sailor Shift\"\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(tolower(name) == tolower(target_name))\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found.\", sep=\"\"))\nsailor_id &lt;- sailor_node$id\n\n# --- Prepare Edges for visNetwork (and ensure IDs are consistent) ---\nedges_igraph_df &lt;- edges_tbl %&gt;%\n  rename(from = source, to = target) %&gt;%\n  mutate(across(c(from, to), as.character)) %&gt;%\n  mutate(across(c(from, to), trimws)) %&gt;%\n  mutate(across(c(from, to), tolower))\n\nvalid_node_ids_set &lt;- unique(nodes_tbl_cleaned$id)\nedges_igraph_df &lt;- edges_igraph_df %&gt;%\n  filter(from %in% valid_node_ids_set & to %in% valid_node_ids_set)\n\n# --- Outward Graph Logic ---\nsailor_songs &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from == sailor_id | to == sailor_id) %&gt;%\n  mutate(target_id = ifelse(from == sailor_id, to, from)) %&gt;%\n  inner_join(nodes_tbl_cleaned, by = c(\"target_id\" = \"id\")) %&gt;%\n  filter(`Node Type` == \"Song\") %&gt;%\n  pull(target_id)\n\nsailor_albums &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from == sailor_id | to == sailor_id) %&gt;%\n  mutate(target_id = ifelse(from == sailor_id, to, from)) %&gt;%\n  inner_join(nodes_tbl_cleaned, by = c(\"target_id\" = \"id\")) %&gt;%\n  filter(`Node Type` == \"Album\") %&gt;%\n  pull(target_id)\n\nlinked_out_targets &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from %in% union(sailor_songs, sailor_albums)) %&gt;%\n  pull(to)\n\nall_out_targets &lt;- union(union(sailor_songs, sailor_albums), linked_out_targets)\n\ncontributors_to_targets &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         to %in% all_out_targets)\n\nedges_from_sailor &lt;- edges_igraph_df %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_to_display,\n         from == sailor_id | from %in% union(sailor_songs, sailor_albums))\n\nedges_outward_filtered &lt;- bind_rows(edges_from_sailor, contributors_to_targets) %&gt;%\n  distinct(from, to, `Edge Type`, key)\n\noutward_ids &lt;- unique(c(edges_outward_filtered$from, edges_outward_filtered$to, sailor_id))\n\n# --- Node Coloring Logic ---\nmin_release_year_for_gradient &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` %in% c(\"Song\", \"Album\") & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  min(na.rm = TRUE)\n\nmax_release_year_for_gradient &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` %in% c(\"Song\", \"Album\") & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  max(na.rm = TRUE)\n\ncolor_palette_func &lt;- colorRampPalette(rev(brewer.pal(9, \"Blues\"))) # Darker = larger year\n\nsong_palette_func &lt;- colorRampPalette(brewer.pal(9, \"YlOrRd\"))   # Songs: yellow to red\nalbum_palette_func &lt;- colorRampPalette(brewer.pal(9, \"PuBuGn\"))  # Albums: purple to green/blue\n\nmin_song_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Song\" & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  min(na.rm = TRUE)\n\nmax_song_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Song\" & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  max(na.rm = TRUE)\n\nmin_album_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Album\" & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  min(na.rm = TRUE)\n\nmax_album_year &lt;- nodes_tbl_cleaned %&gt;%\n  filter(`Node Type` == \"Album\" & id %in% outward_ids) %&gt;%\n  pull(release_year) %&gt;%\n  max(na.rm = TRUE)\n\nnodes_outward_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% outward_ids) %&gt;%\n  left_join(inferred_genres_for_artistes, by = c(\"id\" = \"artiste_id\")) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      get_html_detail(stage_name, \"Stage Name\"),\n      get_html_detail(release_date, \"Release Date\"),\n      get_html_detail(genre, \"Genre (Node)\"),\n      get_html_detail(inferred_genre, \"Genre (Inferred)\"),\n      get_html_detail(notable, \"Notable\")\n    ),\n    group = `Node Type`,\n    size = case_when(\n      id == sailor_id ~ 60,\n      TRUE ~ 15\n    ),\n    shape = case_when(\n      (`Node Type` %in% c(\"Song\", \"Album\")) & notable ~ \"star\",\n      TRUE ~ \"dot\"\n    ),\n    color.background = case_when(\n      id == sailor_id ~ \"gold\",\n      `Node Type` == \"Song\" & !is.na(release_year) ~ {\n        if (min_song_year == max_song_year) {\n          song_palette_func(1)[1]\n        } else {\n          scaled_year &lt;- (release_year - min_song_year) / (max_song_year - min_song_year)\n          scaled_year &lt;- pmax(0, pmin(1, scaled_year))\n          song_palette_func(100)[round(scaled_year * 99) + 1]\n        }\n      },\n      `Node Type` == \"Album\" & !is.na(release_year) ~ {\n        if (min_album_year == max_album_year) {\n          album_palette_func(1)[1]\n        } else {\n          scaled_year &lt;- (release_year - min_album_year) / (max_album_year - min_album_year)\n          scaled_year &lt;- pmax(0, pmin(1, scaled_year))\n          album_palette_func(100)[round(scaled_year * 99) + 1]\n        }\n      },\n      TRUE ~ unname(all_node_type_colors[as.character(`Node Type`)])\n    ),\n    color.background = ifelse(is.na(color.background), all_node_type_colors[\"Unknown\"], color.background),\n    color.border = \"black\",\n    color.highlight.background = \"red\",\n    color.highlight.border = \"darkred\",\n    color.hover.background = \"lightgray\",\n    color.hover.border = \"darkgray\"\n  ) %&gt;%\n  ungroup()\n\nedges_outward_final &lt;- edges_outward_filtered %&gt;%\n  filter(from %in% nodes_outward_vis$id & to %in% nodes_outward_vis$id) %&gt;%\n  group_by(from, to) %&gt;%\n  summarise(\n    aggregated_label = paste(sort(unique(`Edge Type`)), collapse = \", \"),\n    color = all_edge_type_colors[first(`Edge Type`)],\n    arrows = \"to\",\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(\n    label = aggregated_label,\n    title = aggregated_label,\n    color = ifelse(is.na(color), all_edge_type_colors[\"default\"], color)\n  )\n\n# --- Calculate degree for each node in the subgraph (without igraph) ---\ndegree_df &lt;- edges_outward_final %&gt;%\n  select(from, to) %&gt;%\n  pivot_longer(cols = c(from, to), values_to = \"id\") %&gt;%\n  count(id, name = \"degree\")\n\n# Optionally rescale for better visualization (e.g., between 15 and 60)\nrescale &lt;- function(x, to = c(15, 150)) {\n  rng &lt;- range(x, na.rm = TRUE)\n  if (diff(rng) == 0) return(rep(mean(to), length(x)))\n  (x - rng[1]) / diff(rng) * diff(to) + to[1]\n}\ndegree_df$degree_scaled &lt;- rescale(degree_df$degree)\n\n# Join degree to nodes_outward_vis and update size\nnodes_outward_vis &lt;- nodes_outward_vis %&gt;%\n  left_join(degree_df, by = \"id\") %&gt;%\n  mutate(size = ifelse(id == sailor_id, 60, degree_scaled))\n\n\n\n\nRendering the ‘Influenced’ Sailor Shift Network graph\n\n\nCode\ngraph_outward &lt;- visNetwork(nodes_outward_vis, edges_outward_final,\n                            main = paste0(\"'Influenced' \",target_name,\" Network Graph\")) %&gt;%\n  visNodes(\n    shadow = TRUE,\n    font = list(size = 12),\n    shape = \"dot\"\n  ) %&gt;%\n  visEdges(\n    arrows = \"to\",\n    label = ~label,\n    font = list(size = 10, align = \"middle\"),\n    title = ~title,\n    color = list(color = ~color, highlight = ~color),\n    smooth = list(enabled = TRUE, type = \"continuous\", roundness = 0.5),\n    width = 1\n  ) %&gt;%\n  visOptions(\n    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE, algorithm = \"hierarchical\"),\n    nodesIdSelection = list(enabled = TRUE, selected = sailor_id, useLabels = TRUE),\n    selectedBy = \"group\"\n  ) %&gt;%\n  {\n    vis_obj &lt;- .\n    vis_obj &lt;- vis_obj %&gt;%\n      visGroups(groupname = \"Song\", color = all_node_type_colors[\"Song\"], shape = \"dot\") %&gt;%\n      visGroups(groupname = \"Album\", color = all_node_type_colors[\"Album\"], shape = \"dot\") %&gt;%\n      visGroups(groupname = \"Person\", color = all_node_type_colors[\"Person\"], shape = \"dot\") %&gt;%\n      visGroups(groupname = \"MusicalGroup\", color = all_node_type_colors[\"MusicalGroup\"], shape = \"dot\") %&gt;%\n      visGroups(groupname = \"RecordLabel\", color = all_node_type_colors[\"RecordLabel\"], shape = \"dot\") %&gt;%\n      visGroups(groupname = \"Unknown\", color = all_node_type_colors[\"Unknown\"], shape = \"dot\")\n    vis_obj\n  } %&gt;%\n  visInteraction(navigationButtons = TRUE, keyboard = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 1234) %&gt;%\n  visPhysics(enabled = FALSE)\n\ngraph_outward\n\n\n\n\n\n\n\n\n\nCustom Legends using HTML\nAs the visNetwork’s legends is unable to support display gradient and multiple shapes + colors as legends for groups, an alternative to this is to create a custom legends using HTML to be used together with the final generated visNetwork graphs.\nThis legends will only be used for the nodes as the edges already have labelling provided on the visNetwork graphs themselves.\n\nNode Shape and Color Legends\n\n\nCode\ncustom_legend &lt;- tags$div(\n  style = \"margin-bottom:16px;\",\n  tags$b(\"Node Types:\"),\n  tags$ul(style = \"list-style:none;padding-left:0;\",\n    tags$li(\n      tags$span(style = \"display:inline-block;width:18px;height:18px;background:#FF5733;border-radius:50%;border:1px solid #888;margin-right:6px;\"),\n      \"Song - not notable (refer to gradient on the right)\"\n    ),\n    tags$li(\n  tags$span(\n    HTML('&lt;svg width=\"18\" height=\"20\" viewBox=\"0 0 18 18\" style=\"vertical-align:middle;margin-right:6px;\"&gt;\n      &lt;polygon points=\"9,1 11,7 17,7 12,11 14,17 9,13.5 4,17 6,11 1,7 7,7\"\n        style=\"fill:#FF5733;stroke:#888;stroke-width:1;\" /&gt;\n    &lt;/svg&gt;')\n  ),\n  \"Song - notable (refer to gradient on the right)\"\n    ),\n    tags$li(\n      tags$span(style = \"display:inline-block;width:18px;height:18px;background:lightblue;border-radius:50%;border:1px solid #888;margin-right:6px;\"),\n      \"Album - not notable (refer to gradient on the right)\"\n    ),\n    tags$li(\n  tags$span(\n    HTML('&lt;svg width=\"18\" height=\"20\" viewBox=\"0 0 18 18\" style=\"vertical-align:middle;margin-right:6px;\"&gt;\n      &lt;polygon points=\"9,1 11,7 17,7 12,11 14,17 9,13.5 4,17 6,11 1,7 7,7\"\n        style=\"fill:lightblue;stroke:#888;stroke-width:1;\" /&gt;\n    &lt;/svg&gt;')\n  ),\n  \"Album - notable (refer to gradient on the right)\"\n    ),\n    tags$li(\n      tags$span(style = sprintf(\"display:inline-block;width:18px;height:18px;background:%s;border-radius:50%%;border:1px solid #888;margin-right:6px;\", all_node_type_colors[\"Person\"])),\n      \"Person\"\n    ),\n    tags$li(\n      tags$span(style = sprintf(\"display:inline-block;width:18px;height:18px;background:%s;border-radius:50%%;border:1px solid #888;margin-right:6px;\", all_node_type_colors[\"MusicalGroup\"])),\n      \"Musical Group\"\n    ),\n    tags$li(\n      tags$span(style = sprintf(\"display:inline-block;width:18px;height:18px;background:%s;border-radius:50%%;border:1px solid #888;margin-right:6px;\", all_node_type_colors[\"RecordLabel\"])),\n      \"Record Label\"\n    ),\n    tags$li(\n      tags$span(style = sprintf(\"display:inline-block;width:18px;height:18px;background:%s;border-radius:50%%;border:1px solid #888;margin-right:6px;\", all_node_type_colors[\"Unknown\"])),\n      \"Unknown\"\n    ),\n    tags$li(\n      tags$span(style = \"display:inline-block;width:18px;height:18px;background:gold;border-radius:50%;border:1px solid #888;margin-right:6px;\"),\n      \"Sailor Shift\"\n    )\n  )\n)\n\n\n\n\nNode Gradient Color Legends for Song/Album release year\n\n\nCode\n# Song gradient legend\nsong_gradient_legend &lt;- tags$div(\n  style = \"margin-bottom:8px;\",\n  tags$b(\"Song Release Year:\"),\n  tags$div(\n    style = sprintf(\"height:18px;width:200px;background:linear-gradient(to right, %s);border:1px solid #888;margin:2px 0;\",\n                    paste(song_palette_func(10), collapse = \",\"))),\n  tags$span(min_song_year),\n  tags$span(max_song_year, style = \"margin-left:130px;\")\n)\n\n# Album gradient legend\nalbum_gradient_legend &lt;- tags$div(\n  style = \"margin-bottom:8px;\",\n  tags$b(\"Album Release Year:\"),\n  tags$div(\n    style = sprintf(\"height:18px;width:200px;background:linear-gradient(to right, %s);border:1px solid #888;margin:2px 0;\",\n                    paste(album_palette_func(10), collapse = \",\"))),\n  tags$span(min_album_year),\n  tags$span(max_album_year, style = \"margin-left:130px;\")\n)\n\n\n\n\nCustomizing the Layout for displaying the legends\nWith the code chunk below, we can combine the custom_legend, song_gradient_legend and album_gradient_legend into a single legend panel that can be rendered together with the visNetwork graphs:\n\n\nCode\nlegend_panel &lt;- tags$div(\n  style = \"display: flex; justify-content: space-between; align-items: flex-start; width: 100%;\",\n  # Left: Node type legend\n  custom_legend,\n  # Right: Gradient legends\n  tags$div(\n    style = \"flex: 0 0 auto; min-width: 260px; margin-top: 10px\",\n    song_gradient_legend,\n    album_gradient_legend\n  )\n)\n\nlegend_panel\n\n\n\n\nNode Types:\n\n\n\nSong - not notable (refer to gradient on the right)\n\n\n\n      \n    \nSong - notable (refer to gradient on the right)\n\n\n\nAlbum - not notable (refer to gradient on the right)\n\n\n\n      \n    \nAlbum - notable (refer to gradient on the right)\n\n\n\nPerson\n\n\n\nMusical Group\n\n\n\nRecord Label\n\n\n\nUnknown\n\n\n\nSailor Shift\n\n\n\n\n\nSong Release Year:\n\n1983\n2040\n\n\nAlbum Release Year:\n\n1989\n2040\n\n\n\n\n\n\n\n\nFinal - “Influenced By” Sailor Shift network - Inward directed Graph\n\n\nCode\nbrowsable(\n  tagList(\n    graph_inward,\n    legend_panel\n  )\n)\n\n\n\n\n\n\nNode Types:\n\n\n\nSong - not notable (refer to gradient on the right)\n\n\n\n      \n    \nSong - notable (refer to gradient on the right)\n\n\n\nAlbum - not notable (refer to gradient on the right)\n\n\n\n      \n    \nAlbum - notable (refer to gradient on the right)\n\n\n\nPerson\n\n\n\nMusical Group\n\n\n\nRecord Label\n\n\n\nUnknown\n\n\n\nSailor Shift\n\n\n\n\n\nSong Release Year:\n\n1983\n2040\n\n\nAlbum Release Year:\n\n1989\n2040\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the “Influenced By” Sailor Shift Network graph, we will be able to help Silas answer the following questions:\n\nWho has she collaborated with and directly or indirectly influenced?\nThe visualization will allow Silas to:\n\nView who Sailor Shift has collaborated with by viewing which Song nodes have a edge linking Sailor Shift to another group or person. (e.g for the song Tidesworn Ballad, it can be seen from the graph that this song is a collaboration between Sailor Shift and Beatrice Albright as both of them are LyricistOf and PerformerOf that song.\n\n\n\n\nSilas can also view who Sailor Shift might have directly. An example would be Claire Holmes and The Phantom Operators who Interpolates directly from Sailor Shift.\n\nAnother Example would be an indirect influence, such as Genevieve Bell, Jasper Quinn and Julia Carter who all performed InStyleOf Ivy Echos, where Sailor Shift used to be a memberOf and indirectly influenced these persons from there.\n\n\n\n\n\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nWe can see from the Sailor Shift graph that she has helped many others of the Oceanus Folk Community, like the MusicalGroup “The Brine Choir” to gain attention in the Oceanus Folk Scene. For example “The Brine Choir” has collaborated on 3 songs in 2034, 2035 and 2038 where all 3 of them are Notable Songs. This seems to be the case observed from the graph from many other collaborators in the Oceanus Folk artistes as well.\n\n\n\n\n\n\n\nFinal - “Influenced” Sailor Shift network - Outward directed Graph\n\n\nCode\nbrowsable(\n  tagList(\n    graph_outward,\n    legend_panel\n  )\n)\n\n\n\n\n\n\nNode Types:\n\n\n\nSong - not notable (refer to gradient on the right)\n\n\n\n      \n    \nSong - notable (refer to gradient on the right)\n\n\n\nAlbum - not notable (refer to gradient on the right)\n\n\n\n      \n    \nAlbum - notable (refer to gradient on the right)\n\n\n\nPerson\n\n\n\nMusical Group\n\n\n\nRecord Label\n\n\n\nUnknown\n\n\n\nSailor Shift\n\n\n\n\n\nSong Release Year:\n\n1983\n2040\n\n\nAlbum Release Year:\n\n1989\n2040\n\n\n\n\n\n\nFrom the “Influenced By” Sailor Shift Network graph, we will be able to help Silas answer the following questions:\n\nWho has she been most influenced by over time?\n\nWe are able to view the influences Sailor Shift got over time through the network graph and the release_date of the song/album and the respective edges linking this released song to another song or album or person/musical group.\nAn example would be her influence by Shannon Harvey through the song “Our Invevitable Path”( an indie folk song released in 2017) which “Barnacle Heart”(released in 2034) was done in the style of.\n\nBefore that in 2030, however, she was influences by Igor Dys through the song Echoes of Forgotten Light (a Alternative Rock Song released in 2004), which her song “Driftwood Lullaby” was done in style of.\n\n\n\n\n```"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selecting one submission provided by your classmate, critic three good design principles and three areas for further improvement. With reference to the comment, prepare the makeover version of the data visualisation.\n\n\n\n\nSelected Visualisation: Marga Thura: Section 3, Plot 2\n\n\n\n\n\n\n\n\nUsage of thousands separator in data labels and axis to improve readability for numbers\nX-axis labels are tilted in an angle to help with readability for the Planning Area groups\nSoft gridlines with a lighter shade than the barchart bar fill colors are used that do not distract from the main barchart data\n\n\n\n\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics\n\n\n\n\n\nI replicated the data loading and cleaning of data using the code provided from Marga’s Take-home Exercise 1 page:\n\n# Load necessary library\nlibrary(readr)\n\n# Read the CSV file from the specified relative path\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, \n               hrbrthemes, patchwork, \n               haven, ggiraph, plotly, DT, \n               knitr, scales,\n               ggridges, ggpubr, \n               gganimate, gapminder, ggdist, \n               ggtext, ggalt,\n               cowplot)\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n# Load the dataset\nrespop &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Convert types and clean\nrespop_clean &lt;- respop %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = as.numeric(Age),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ),\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  ) %&gt;%\n  filter(!is.na(Pop), Pop &gt; 0)\nprint(respop_clean)\n\n# A tibble: 37,243 × 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;fct&gt;      &lt;fct&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ℹ 37,233 more rows\n\n\n\n\n\n\n\n\nAdjustment Made:\n\n\n\nMade an adjustment to use the cleaned dataset which was cleaned above for the summary\n\n\n\n  library(readr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n\n  # Load and summarize population data\n  # respopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n  #pop_by_pa &lt;- respopagesex2024 %&gt;% \n  pop_by_pa &lt;- respop_clean %&gt;%  #adjusted to use the cleaned dataset\n    mutate(Pop = as.numeric(Pop)) %&gt;%\n    filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n    group_by(PA) %&gt;%\n    summarise(Total_Pop = sum(Pop, na.rm = TRUE))\n\n  # Check population range\n  print(summary(pop_by_pa$Total_Pop))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    140    8432   94700   99846  157685  284950 \n\n\n\n\n\n\nAdjustments I have made to Marga’s original graph based on the 3 Areas of Improvement feedback:\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page:\n\n\n\n\n\n\n\nAdjustment #1:\n\n\n\nAdjusted fill color for geombar plot from “grey70” to a darker “grey40”.\n\n\n\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area:\n\n\n\n\n\n\n\nAdjustment #2:\n\n\n\nAdjusted geom_text hjust and vjust values to centre data labels to the respective bars in the chart\n\n\n\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics:\n\n\n\n\n\n\n\nAdjustment #3:\n\n\n\n\nFlipped the axis for population and planning area for better clarity\nAdjusted the visualisation to generate plot1 for top 10 population PAs and plot2 for bottom 10 population PAs. Then generated a composite figure of plot1 and plot2 together using the patchwork extension\nOther miscellaneous adjustments to text size, axis limits to accommodate aesthetic adjustments for plot1, plot2 and the composite graph such as removing the horizontal axis and adjusting text size.\n\n\n\n\nComposite Visualisation (using patchwork)Cleaning CodeCreating Bar Chart for Top 10 PAsCreating Bar Chart for Bottom 10 PAs\n\n\n\nlibrary(patchwork)\nplot1 / plot2\n\n\n\n\n\n\n\n\n\n\n\n# Disable scientific notation globally\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Trim whitespace from PA and SZ\nrespopagesex2024 &lt;- respopagesex2024 %&gt;%\n  mutate(\n    PA = trimws(PA),\n    SZ = trimws(SZ)\n  )\n\n# Clean and summarize population by PA, including subzone count\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)  # Count unique subzones per PA\n  ) %&gt;%\n  arrange(desc(Total_Pop))\n\n\n\n\n# Create bar chart for top 10\ntop_n &lt;- 10  \ntop_pa &lt;- pop_by_pa %&gt;%\n  slice_max(order_by = Total_Pop, n = top_n)\n\nplot1 &lt;- ggplot(data = top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Top\", top_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 325000, by = 50000),\n  limits = c(0, 325000)\n)\n\nprint(plot1)\n\n\n\n\n\n\n\n\n\n\n\n# Create bar chart for btm 10\nbtm_n &lt;- 10  # \nbtm_pa &lt;- pop_by_pa %&gt;%\n  slice_min(order_by = Total_Pop, n = btm_n)\n\nplot2 &lt;- ggplot(data = btm_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Bottom\", btm_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 4750, by = 1000),\n  limits = c(0, 4750)\n)\n\nprint(plot2)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#the-task",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selecting one submission provided by your classmate, critic three good design principles and three areas for further improvement. With reference to the comment, prepare the makeover version of the data visualisation.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#selected-visualisation-and-feedback",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#selected-visualisation-and-feedback",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selected Visualisation: Marga Thura: Section 3, Plot 2\n\n\n\n\n\n\n\n\nUsage of thousands separator in data labels and axis to improve readability for numbers\nX-axis labels are tilted in an angle to help with readability for the Planning Area groups\nSoft gridlines with a lighter shade than the barchart bar fill colors are used that do not distract from the main barchart data\n\n\n\n\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#replicating-data-loading-and-cleaning.",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#replicating-data-loading-and-cleaning.",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "I replicated the data loading and cleaning of data using the code provided from Marga’s Take-home Exercise 1 page:\n\n# Load necessary library\nlibrary(readr)\n\n# Read the CSV file from the specified relative path\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, \n               hrbrthemes, patchwork, \n               haven, ggiraph, plotly, DT, \n               knitr, scales,\n               ggridges, ggpubr, \n               gganimate, gapminder, ggdist, \n               ggtext, ggalt,\n               cowplot)\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n# Load the dataset\nrespop &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Convert types and clean\nrespop_clean &lt;- respop %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = as.numeric(Age),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ),\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  ) %&gt;%\n  filter(!is.na(Pop), Pop &gt; 0)\nprint(respop_clean)\n\n# A tibble: 37,243 × 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;fct&gt;      &lt;fct&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ℹ 37,233 more rows\n\n\n\n\n\n\n\n\nAdjustment Made:\n\n\n\nMade an adjustment to use the cleaned dataset which was cleaned above for the summary\n\n\n\n  library(readr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n\n  # Load and summarize population data\n  # respopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n  #pop_by_pa &lt;- respopagesex2024 %&gt;% \n  pop_by_pa &lt;- respop_clean %&gt;%  #adjusted to use the cleaned dataset\n    mutate(Pop = as.numeric(Pop)) %&gt;%\n    filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n    group_by(PA) %&gt;%\n    summarise(Total_Pop = sum(Pop, na.rm = TRUE))\n\n  # Check population range\n  print(summary(pop_by_pa$Total_Pop))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    140    8432   94700   99846  157685  284950",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#makeover-version-of-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#makeover-version-of-visualisation",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Adjustments I have made to Marga’s original graph based on the 3 Areas of Improvement feedback:\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page:\n\n\n\n\n\n\n\nAdjustment #1:\n\n\n\nAdjusted fill color for geombar plot from “grey70” to a darker “grey40”.\n\n\n\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area:\n\n\n\n\n\n\n\nAdjustment #2:\n\n\n\nAdjusted geom_text hjust and vjust values to centre data labels to the respective bars in the chart\n\n\n\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics:\n\n\n\n\n\n\n\nAdjustment #3:\n\n\n\n\nFlipped the axis for population and planning area for better clarity\nAdjusted the visualisation to generate plot1 for top 10 population PAs and plot2 for bottom 10 population PAs. Then generated a composite figure of plot1 and plot2 together using the patchwork extension\nOther miscellaneous adjustments to text size, axis limits to accommodate aesthetic adjustments for plot1, plot2 and the composite graph such as removing the horizontal axis and adjusting text size.\n\n\n\n\nComposite Visualisation (using patchwork)Cleaning CodeCreating Bar Chart for Top 10 PAsCreating Bar Chart for Bottom 10 PAs\n\n\n\nlibrary(patchwork)\nplot1 / plot2\n\n\n\n\n\n\n\n\n\n\n\n# Disable scientific notation globally\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Trim whitespace from PA and SZ\nrespopagesex2024 &lt;- respopagesex2024 %&gt;%\n  mutate(\n    PA = trimws(PA),\n    SZ = trimws(SZ)\n  )\n\n# Clean and summarize population by PA, including subzone count\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)  # Count unique subzones per PA\n  ) %&gt;%\n  arrange(desc(Total_Pop))\n\n\n\n\n# Create bar chart for top 10\ntop_n &lt;- 10  \ntop_pa &lt;- pop_by_pa %&gt;%\n  slice_max(order_by = Total_Pop, n = top_n)\n\nplot1 &lt;- ggplot(data = top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Top\", top_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 325000, by = 50000),\n  limits = c(0, 325000)\n)\n\nprint(plot1)\n\n\n\n\n\n\n\n\n\n\n\n# Create bar chart for btm 10\nbtm_n &lt;- 10  # \nbtm_pa &lt;- pop_by_pa %&gt;%\n  slice_min(order_by = Total_Pop, n = btm_n)\n\nplot2 &lt;- ggplot(data = btm_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Bottom\", btm_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 4750, by = 1000),\n  limits = c(0, 4750)\n)\n\nprint(plot2)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.\nThe data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.\nThe data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1",
    "section": "Loading packages",
    "text": "Loading packages\nThe following R packages are loaded using pacman::p_load() on top of the tidyverse packages:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\npatchwork: an R package for preparing composite figure created using ggplot2.\ndplyr: for data manipulation with the tidyverse package\nscales: for formatting and scaling data plots\nxml12: for working with HTML\nsf: for handling GIS file formats\n\nThe sf and xml12 packages were used as a dataset is extracted from a GEOJSON file later on.\n\npacman::p_load(tidyverse, ggplot2, ggrepel, patchwork, \n               ggthemes,dplyr, xml12, sf, scales)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "Import data",
    "text": "Import data\nThe dataset “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024” retrieved from the Department of Statistics, Singapore (DOS) will be used.\nWe will be importing this dataset as “sgResData24”\n\nsgResData24 &lt;- read_csv(\"data/respopagesex2024.csv\")",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "title": "Take-home Exercise 1",
    "section": "Data pre-processing",
    "text": "Data pre-processing\nWe first take a look at the data and check for:\n\nAny missing/NULL values or entries\nIf any column data types need adjustments\nIf any new columns need to be introduced to be used for visualisations\nAny duplicate entries\n\n\nPreview of the datasetDescriptive StatisticsChecking for duplicate values\n\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\ndim(sgResData24)\n\n[1] 60424     6\n\nhead(sgResData24)\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\nsummary(sgResData24)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time     \n Min.   :   0.0   Min.   :2024  \n 1st Qu.:   0.0   1st Qu.:2024  \n Median :  20.0   Median :2024  \n Mean   :  69.4   Mean   :2024  \n 3rd Qu.:  90.0   3rd Qu.:2024  \n Max.   :1180.0   Max.   :2024  \n\n\n\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\ndistinct(sgResData24)\n\n# A tibble: 60,424 × 6\n   PA         SZ                     Age   Sex       Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024\n# ℹ 60,414 more rows\n\n\nFrom the output of distinct() there are 60,424 x 6 rows returned, showing that there are no duplicated rows in the dataset.\n\n\n\nUsing the count() function, we can view the unique values/names from each column\n\nPA Column CountSZ Column CountAG Column CountSex Column CountTime Column Count\n\n\n\ncount(sgResData24,PA)\n\n# A tibble: 55 × 2\n   PA                          n\n   &lt;chr&gt;                   &lt;int&gt;\n 1 Ang Mo Kio               2184\n 2 Bedok                    1456\n 3 Bishan                    546\n 4 Boon Lay                  728\n 5 Bukit Batok              1638\n 6 Bukit Merah              3094\n 7 Bukit Panjang            1274\n 8 Bukit Timah              1456\n 9 Central Water Catchment   182\n10 Changi                    546\n# ℹ 45 more rows\n\n\nThere are 55 unique planning areas\n\n\n\ncount(sgResData24,SZ)\n\n# A tibble: 332 × 2\n   SZ                         n\n   &lt;chr&gt;                  &lt;int&gt;\n 1 Admiralty                182\n 2 Airport Road             182\n 3 Alexandra Hill           182\n 4 Alexandra North          182\n 5 Aljunied                 182\n 6 Anak Bukit               182\n 7 Anchorvale               182\n 8 Ang Mo Kio Town Centre   182\n 9 Anson                    182\n10 Bahar                    182\n# ℹ 322 more rows\n\n\nThere are 332 unique subzones\n\n\n\ncount(sgResData24,Age)\n\n# A tibble: 91 × 2\n   Age       n\n   &lt;chr&gt; &lt;int&gt;\n 1 0       664\n 2 1       664\n 3 10      664\n 4 11      664\n 5 12      664\n 6 13      664\n 7 14      664\n 8 15      664\n 9 16      664\n10 17      664\n# ℹ 81 more rows\n\n\n\n\n\ncount(sgResData24,Sex)\n\n# A tibble: 2 × 2\n  Sex         n\n  &lt;chr&gt;   &lt;int&gt;\n1 Females 30212\n2 Males   30212\n\n\nThere are only 2 Sex groups - Male and Female\n\n\n\ncount(sgResData24,Time)\n\n# A tibble: 1 × 2\n   Time     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2024 60424\n\n\nThere is only 1 unique group for time, the year 2024, for all the rows in the dataset\n\n\n\n\n\n\n\n\n\n🧐Observations and notes for this dataset\n\n\n\n\nThere are 60,424 rows and 6 columns of data.\nThere are no duplicate rows/ values\nColumn Definition and Unique Values Count 6 Columns (5 Group and 1 Count):\n\nPA (chr type) - Planning Area (55 unique)\nSZ (chr type) - Subzone (332 unique)\nAge (chr type) - Age of Residents (Values: 1 to 89, 90_and_Over)\nSex (chr type) - Sex (2 unique)\nTime (dbl type) - Time/ Period (1 unique)\nPop (dbl type) - Resident Count",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#transforming-and-aggregating-age-column",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#transforming-and-aggregating-age-column",
    "title": "Take-home Exercise 1",
    "section": "Transforming and Aggregating Age Column",
    "text": "Transforming and Aggregating Age Column\nAge column is a chr type column (with “90_and_Over” as one of the values in this column). From the Age column create 2 new columns so that we can use them for our data visualisations later on:\n\nAge_num - introduced column that transforms the data type of the Age column from chr type to dbl type. Additionally, “90_and_Over” is converted to the value 90.\nAge_group - aggregating the age groups of the population together using 10 year intervals\n\nThis is performed using the mutate() and case_when() functions.\n\nsgResData24 &lt;- sgResData24 %&gt;%\n  mutate(\n    # Convert age to numeric, handle \"90_and_Over\"\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ suppressWarnings(as.numeric(Age))  # Avoid warnings from \"90_and_Over\"\n    ),\n    \n    # Group into age bands\n    Age_group = case_when(\n      Age_num &gt;= 0 & Age_num &lt;= 9   ~ \"0-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 19 ~ \"10-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 29 ~ \"20-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 39 ~ \"30-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 49 ~ \"40-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 59 ~ \"50-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 69 ~ \"60-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 79 ~ \"70-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 89 ~ \"80-89\",\n      Age_num &gt;= 90                ~ \"90+\",\n      TRUE                         ~ NA_character_\n    )\n  )\n\nWe can then check our adjusted dataset using the print() function below:\n\nprint(sgResData24)\n\n# A tibble: 60,424 × 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ℹ 60,414 more rows",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aggregate-planning-area-pa-column-into-nsew-central-regions-of-singapore",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aggregate-planning-area-pa-column-into-nsew-central-regions-of-singapore",
    "title": "Take-home Exercise 1",
    "section": "Aggregate Planning Area (PA Column) into NSEW & Central Regions of Singapore",
    "text": "Aggregate Planning Area (PA Column) into NSEW & Central Regions of Singapore\nReferencing the URA 2019 masterplan map, we can group the Planning Areas into the different North, South, East, West and Central regions of Singapore.\nWe reference this from the GEOJSON data obtained from this data.gov.sg website link.\n\nExtracting the Town(PA) and Region data from the GeoJSON file\nThe sf package is used here to help extract the spatial vector data from the GEOJSON data to extract the Town and Regions of Singapore.\n\n#Install required packages if not already installed\nlibrary(sf)\nlibrary(xml2)\nlibrary(dplyr)\n\n# Load the GeoJSON file\ngeo_data &lt;- st_read(\"data/MasterPlan2019PlanningAreaBoundaryNoSea.geojson\")\n\nReading layer `MasterPlan2019PlanningAreaBoundaryNoSea' from data source \n  `C:\\NJYao\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex01\\data\\MasterPlan2019PlanningAreaBoundaryNoSea.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n# Function to parse HTML and extract PLN_AREA_N and REGION_N\nextract_info &lt;- function(html_str) {\n  doc &lt;- read_html(html_str)\n  rows &lt;- xml_find_all(doc, \".//tr\")\n\n  # Loop through rows and extract key-value pairs\n  data &lt;- lapply(rows, function(row) {\n    th &lt;- xml_text(xml_find_first(row, \".//th\"))\n    td &lt;- xml_text(xml_find_first(row, \".//td\"))\n    if (!is.na(th) && !is.na(td)) {\n      return(setNames(list(td), th))\n    } else {\n      return(NULL)\n    }\n  })\n\n  # Combine and extract specific fields\n  info &lt;- do.call(c, data)\n  list(\n    Town = info[[\"PLN_AREA_N\"]],\n    Region = info[[\"REGION_N\"]]\n  )\n}\n\n\n# Apply the extraction function to each row\ninfo_list &lt;- lapply(geo_data$Description, extract_info)\n\n# Combine results into a data frame\ninfo_df &lt;- bind_rows(info_list) %&gt;% distinct() %&gt;% arrange(Region, Town)\n\n# View result\nprint(info_df)\n\n# A tibble: 55 × 2\n   Town          Region        \n   &lt;chr&gt;         &lt;chr&gt;         \n 1 BISHAN        CENTRAL REGION\n 2 BUKIT MERAH   CENTRAL REGION\n 3 BUKIT TIMAH   CENTRAL REGION\n 4 DOWNTOWN CORE CENTRAL REGION\n 5 GEYLANG       CENTRAL REGION\n 6 KALLANG       CENTRAL REGION\n 7 MARINA EAST   CENTRAL REGION\n 8 MARINA SOUTH  CENTRAL REGION\n 9 MARINE PARADE CENTRAL REGION\n10 MUSEUM        CENTRAL REGION\n# ℹ 45 more rows\n\n\nFrom the output of the above print(info_df), we have a 55x2 table of “Town” and “Region” which we can then use for joining with our sgResData24 dataset.\nTo prepare our data for joining we first transform our sgResData24 dataset’s “PA” column data to uppercase to match the info_df dataset “Town” data for joining later\n\nsgResData24 %&gt;% mutate(PA = toupper(PA))\n\n# A tibble: 60,424 × 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1 ANG MO KIO Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 ANG MO KIO Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 ANG MO KIO Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 ANG MO KIO Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 ANG MO KIO Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 ANG MO KIO Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 ANG MO KIO Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 ANG MO KIO Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 ANG MO KIO Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 ANG MO KIO Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ℹ 60,414 more rows\n\n\nAdditionally, we rename the info_df dataset’s “Town” column into “PA” using the mutate() function.\nWe can then perform a left_join of the sgResData24 “PA” column with the info_df dataset’s “PA” column to introduce the Region Column into sgResData24 dataset.\n\nlibrary(dplyr)\n\n# Rename Town to PA in the region info dataframe\nregion_info &lt;- info_df %&gt;% rename(PA = Town)\n\n# left join sgResData24 with region_info to get Region column\nsgResData24 &lt;- sgResData24 %&gt;% mutate(PA = toupper(PA)) %&gt;%\n  left_join(region_info, by = \"PA\")\n\nprint(sgResData24)\n\n# A tibble: 60,424 × 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n 1 ANG MO KIO Ang Mo Kio Town … 0     Males    10  2024       0 0-9       NORTH…\n 2 ANG MO KIO Ang Mo Kio Town … 0     Fema…    10  2024       0 0-9       NORTH…\n 3 ANG MO KIO Ang Mo Kio Town … 1     Males    10  2024       1 0-9       NORTH…\n 4 ANG MO KIO Ang Mo Kio Town … 1     Fema…    10  2024       1 0-9       NORTH…\n 5 ANG MO KIO Ang Mo Kio Town … 2     Males    10  2024       2 0-9       NORTH…\n 6 ANG MO KIO Ang Mo Kio Town … 2     Fema…    10  2024       2 0-9       NORTH…\n 7 ANG MO KIO Ang Mo Kio Town … 3     Males    10  2024       3 0-9       NORTH…\n 8 ANG MO KIO Ang Mo Kio Town … 3     Fema…    10  2024       3 0-9       NORTH…\n 9 ANG MO KIO Ang Mo Kio Town … 4     Males    30  2024       4 0-9       NORTH…\n10 ANG MO KIO Ang Mo Kio Town … 4     Fema…    10  2024       4 0-9       NORTH…\n# ℹ 60,414 more rows\n\n\nThe output of print(sgResData24) shows the addition of the “Region” column.\nWe can perform the checks performed above to verify that the new columns introduced do not have any issues before proceeding with the visualisations.\n\nPreview of the datasetDescriptive StatisticsChecking for duplicate values\n\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\ndim(sgResData24)\n\n[1] 60424     9\n\nhead(sgResData24)\n\n# A tibble: 6 × 9\n  PA         SZ                 Age   Sex     Pop  Time Age_num Age_group Region\n  &lt;chr&gt;      &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n1 ANG MO KIO Ang Mo Kio Town C… 0     Males    10  2024       0 0-9       NORTH…\n2 ANG MO KIO Ang Mo Kio Town C… 0     Fema…    10  2024       0 0-9       NORTH…\n3 ANG MO KIO Ang Mo Kio Town C… 1     Males    10  2024       1 0-9       NORTH…\n4 ANG MO KIO Ang Mo Kio Town C… 1     Fema…    10  2024       1 0-9       NORTH…\n5 ANG MO KIO Ang Mo Kio Town C… 2     Males    10  2024       2 0-9       NORTH…\n6 ANG MO KIO Ang Mo Kio Town C… 2     Fema…    10  2024       2 0-9       NORTH…\n\n\n\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\nsummary(sgResData24)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time         Age_num    Age_group        \n Min.   :   0.0   Min.   :2024   Min.   : 0   Length:60424      \n 1st Qu.:   0.0   1st Qu.:2024   1st Qu.:22   Class :character  \n Median :  20.0   Median :2024   Median :45   Mode  :character  \n Mean   :  69.4   Mean   :2024   Mean   :45                     \n 3rd Qu.:  90.0   3rd Qu.:2024   3rd Qu.:68                     \n Max.   :1180.0   Max.   :2024   Max.   :90                     \n    Region         \n Length:60424      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\ndistinct(sgResData24)\n\n# A tibble: 60,424 × 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n 1 ANG MO KIO Ang Mo Kio Town … 0     Males    10  2024       0 0-9       NORTH…\n 2 ANG MO KIO Ang Mo Kio Town … 0     Fema…    10  2024       0 0-9       NORTH…\n 3 ANG MO KIO Ang Mo Kio Town … 1     Males    10  2024       1 0-9       NORTH…\n 4 ANG MO KIO Ang Mo Kio Town … 1     Fema…    10  2024       1 0-9       NORTH…\n 5 ANG MO KIO Ang Mo Kio Town … 2     Males    10  2024       2 0-9       NORTH…\n 6 ANG MO KIO Ang Mo Kio Town … 2     Fema…    10  2024       2 0-9       NORTH…\n 7 ANG MO KIO Ang Mo Kio Town … 3     Males    10  2024       3 0-9       NORTH…\n 8 ANG MO KIO Ang Mo Kio Town … 3     Fema…    10  2024       3 0-9       NORTH…\n 9 ANG MO KIO Ang Mo Kio Town … 4     Males    30  2024       4 0-9       NORTH…\n10 ANG MO KIO Ang Mo Kio Town … 4     Fema…    10  2024       4 0-9       NORTH…\n# ℹ 60,414 more rows",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-plot-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-plot-visualisation",
    "title": "Take-home Exercise 1",
    "section": "Population Pyramid Plot Visualisation",
    "text": "Population Pyramid Plot Visualisation\nPlotting Age Group against the Population Count using a population pyramid\nThe ggplot and dplyr library will be used for this visualisation.\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values for each group in the population pyramid using mutate(), summarise() and group_by() functions. Then we set the levels for the Age_groups so that the axis labels will be ordered in ascending order. The Pop values for the Males then have to be flipped into -ve values by using the mutate() and ifelse() functions.\nThe population pyramid is then plot using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as defining the fill to show segregate the plot by Sex.There are also data labels added for the % of total population and count for each group of the pyramid plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# Summarise and compute plot values\npop_pyramid &lt;- sgResData24 %&gt;%\n  group_by(Age_group, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100) %&gt;%\n  ungroup()\n\n# Order Age_group for proper vertical alignment\nage_levels &lt;- c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90+\")\npop_pyramid$Age_group &lt;- factor(pop_pyramid$Age_group, levels = age_levels)\n\n# Flip male values to negative\npop_pyramid &lt;- pop_pyramid %&gt;%\n  mutate(Pop_plot = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = paste0(comma(abs(Pop)), \"\\n(\", round(abs(Percent), 1), \"%)\"))\n\n# Plot\nggplot(pop_pyramid, aes(x = Age_group, y = Pop_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, position = \"identity\") +\n  coord_flip() +\n  geom_text(aes(label = Label),\n            position = position_nudge(y = ifelse(pop_pyramid$Sex == \"Males\", -50000, 10000)),\n            hjust = ifelse(pop_pyramid$Sex == \"Male\", 1, 0),\n            size = 4, color = 'black') +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  scale_fill_manual(values = c(\"Males\" = \"#619CFF\", \"Females\" = \"#F8766D\")) +\n  labs(title = \"Population vs Age Group & Sex\",\n       subtitle = \"                                                   Males                                                                                      Females\",\n       x = \"Age Group\", y = \"Population Count\") +\n  theme_minimal()+\n  theme(\n    plot.margin = margin(10, 20, 20, 20),  # top, right, bottom, left\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n    plot.subtitle = element_text(size = 14)\n    )\n\n\n\n\n\nObservation from the Plot\nFrom the population pyramid chart, we can observe that the Age group of 30-39 has the largest population (14.9% + 15.4% of the overall population), and the largest population for both males and females respectively as well.\nWe can also observe an aging population based on the shape of the population pyramid chart, with the 0-9, 10-19 and 20-29 Age group populations being lesser than the 30-39 Age group.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-visualisation-of-region-vs-population-and-sex",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-visualisation-of-region-vs-population-and-sex",
    "title": "Take-home Exercise 1",
    "section": "Bar Chart Visualisation of Region vs Population and Sex",
    "text": "Bar Chart Visualisation of Region vs Population and Sex\nPlotting Region vs Population and Sex.\nThe ggplot and dplyr library will be used for this visualisation.\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values (the % and total group count) for each group in the bar chart using mutate(), summarise() and group_by() functions.\nThe bar chart is then plotted using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as the addition of the total count and percentages for Males and Females within each group.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Compute total population by Region and Sex\nstacked_data_region &lt;- sgResData24 %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(Region) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100)\n\n#Compute total population for each Region group (for total label)\nlabels_data_region &lt;- stacked_data_region %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop))\n\n#Plot stacked bars with percent labels inside and total on top\n  ggplot(stacked_data_region, aes(x = Region, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Percent), \"%\")), \n            position = position_stack(vjust = 0.5), size = 5, color = \"white\") +\n  geom_text(data = labels_data_region, aes(x = Region, y = Pop, label = comma(Pop)), \n            vjust = -0.5, size = 5, inherit.aes = FALSE) +\n  labs(x = \"Region\", y = \"Population\", title = \"Population vs Region & Sex\") +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),# Rotate x-axis labels and adjust alignment\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n    legend.position = 'bottom', legend.text = element_text(size=12),\n    legend.title = element_text(size = 14)\n  )\n\n\n\n\n\nObservation from the Plot\nFrom the Bar chart, we can observe that the North-East Region has the highest population, followed by the Central and then West region. Based on the percentages observed for all 5 regions, we can also tell that there are more Females than Male in the population, with Males having 48 to 49% and Females having 51 to 52%. It can also be observed that the West Region has a greater proportion of Females(52%) compared to Males(48%).",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#half-eye-box-plot-visualisation-of-age-vs-region",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#half-eye-box-plot-visualisation-of-age-vs-region",
    "title": "Take-home Exercise 1",
    "section": "Half-eye + Box Plot Visualisation of Age vs Region",
    "text": "Half-eye + Box Plot Visualisation of Age vs Region\nPlotting the Distribution of Age vs Region\nThe ggplot, dplyr and ggdist library will be used for this visualisation.\nWe first calculate the mean for each group to label the weighted means in the visualisation (using Age_num and Pop as the weight).\nThe chart is then plotted using ggplot to plot a half-eye plot (together with ggdist) and boxplot together. The other respective packages are used to adjust the aesthetics of the plo such as ith the weighted mean calculated earlier indicated with a red point in each boxplot using geompoint(). Each Region group is also assigned a different colour to help differentiate each group visually.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggdist)\n\n# Compute weighted mean for each region\nmean_labels &lt;- sgResData24 %&gt;%\n  group_by(Region) %&gt;%\n  summarise(mean_age = weighted.mean(Age_num, Pop))\n\n# Plot with mean labels\nggplot(sgResData24, aes(x = Region, y = Age_num, fill = Region)) +\n  stat_halfeye(\n    aes(weight = Pop, fill = Region),\n    adjust = 0.5,\n    width = 0.6,\n    justification = -0.3,\n    .width = 0,\n    point_colour = NA\n  ) +\n  geom_point (data = mean_labels, aes(x = Region, y = mean_age), shape = 20, size = 5, color = \"red\") +\n  geom_boxplot(\n    width = .12,\n    outlier.shape = NA,\n    alpha = 0.6\n  ) +\n  geom_text(\n    data = mean_labels,\n    aes(x = Region, y = mean_age, label = round(mean_age, 1)),\n    #vjust = -0.8,\n    hjust = 1.7,\n    color = \"red\",\n    fontface = \"bold\",\n    size = 4\n  ) +\n  scale_y_continuous(breaks = seq(0, max(sgResData24$Age_num), by = 10))+ \n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 12),# Rotate x-axis labels and adjust alignment\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n  ) +\n  labs(x = \"Region\", y = \"Age\", title = \"Distribution of Age vs Region\")\n\n\n\n\n\n\n\n\n\n\nUse The Correct Data Variable with Correct Data Type\n\n\n\nUse Age_num (dbl type) instead of Age (chr type) for this Distribution plot\n\n\n\nObservation from the Plot\nWe can view that the distribution of the age of the population across the region is the same, with roughly the same median as well based on the boxplot median position. However, it can be observed that the mean age are different for each region, with Central having the highest(44.1), followed by East(42.6) and West(41.6). The higher mean in Central Region may indicate a greater proportion of older people living in these areas compared to other Regions.\nThis can also be observed from the distribution seen with the half-eye plot, where the end of the distribution graph shows a higher distribution of population above the age of around 80 compared to the other regions as shown in the screenshot below:",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html",
    "title": "MC1",
    "section": "",
    "text": "Important\n\n\n\nYou are required to install the R packages above, if necessary, before continue to the next step\nCheck packages to ensure they are installed\nCode\npacman::p_load(tidyverse, jsonlite, \n               SmartEDA, tidygraph, \n               ggraph)\n\n#tidygraph to build graph object, to work tgt with ggraph\n#ggplot no need to call out again as its in tidyverse\n\n#SmartEDA library for exploratory data analysis, good to have it to check data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#importing-knowledge-graph-data",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#importing-knowledge-graph-data",
    "title": "MC1",
    "section": "Importing Knowledge Graph Data",
    "text": "Importing Knowledge Graph Data\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nInspect Structure\n\n\nCode\nstr(kg,max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nCode\n#structure enable to check structure of the data\n#good to have this line to check structues of data\n\n\n\n\n\n\n\n\nNote\n\n\n\ndirected - tells you if its a directed graph\nnodes and links are in dataframe- can be read\nCan see data types etc from Environment tab of R-studio - look at the structure\n\nCan open and see the data table\n\n\n\n\n\n\nExtract and Inspect\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes) #kg$ know that pull nodes out\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#initial-eda",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#initial-eda",
    "title": "MC1",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y= `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nCode\n##want to know how many classes available for edge type\n## field names always use ``, not ''\n\n\n\n\nCode\nggplot \n\n\nfunction (data = NULL, mapping = aes(), ..., environment = parent.frame()) \n{\n    UseMethod(\"ggplot\")\n}\n&lt;bytecode: 0x0000015eae606388&gt;\n&lt;environment: namespace:ggplot2&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#creating-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#creating-knowledge-graph",
    "title": "MC1",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mappying from node id to row index\navoid multiple id that have 0 0 but actually they have missing value\nto make sure they have unique id code\nTo reassign ID\ndepends on scenario, may need to subset data first before extracting - depends on use case\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n\n\n\nStep 2: Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map,by = c(\"source\" = \"id\"))%&gt;%\n    rename(from =index) %&gt;%\n    left_join(id_map, by = c(\"target\" = \"id\"))%&gt;%\n    rename(to = index)\n## see data table original source is 0 now become from 1\n\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n#if its directed, true, if not false. BUt in this case there is data to show its directed = true so can reference the data from the data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#visualising-the-knowledge-graph",
    "title": "MC1",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n#once fix this, everytime run random is the same number\n\n\n\nVisualising the Whole Graph\n\n\nCode\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size =2.5) +\n  theme_void()\n\n\n\nStep 1:Filter edges to only “Memberof”\nmining for those “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter (`Edge Type` == \"MemberOf\")\n\n##filter off the edges but the nodes are still there, still a large set of data 17412 as the source\n\n\n\n\nStep 2: Extract only connected nodes (ie used in these edges)\n\n\nCode\n##additional code to remove and only used connected nodes, those that are useful\nused_nodes_indices &lt;- graph_memberof %&gt;%\n  activate(edges)%&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: keep only those node\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_nodes_indices) %&gt;%\n  select(-row_id) # optional cleanup\n\n\n\n\nplot the sub graph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha= 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1)+\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size=2.5)\n\n\n\n\n\n\n\n\n\nCode\n  theme_void()\n\n\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\nInstalling package into 'C:/Users/Jin Yao/AppData/Local/R/win-library/4.5'\n(as 'lib' is unspecified)\n\n\nalso installing the dependency 'Rcpp'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5/PACKAGES'\n\n\npackage 'Rcpp' successfully unpacked and MD5 sums checked\npackage 'ggrepel' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Jin Yao\\AppData\\Local\\Temp\\RtmpGiAJCj\\downloaded_packages\n\n\n\nggrepel installed\n\n\nInstalling package into 'C:/Users/Jin Yao/AppData/Local/R/win-library/4.5'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5/PACKAGES'\n\n\npackage 'patchwork' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Jin Yao\\AppData\\Local\\Temp\\RtmpGiAJCj\\downloaded_packages\n\n\n\npatchwork installed\nInstalling package into 'C:/Users/Jin Yao/AppData/Local/R/win-library/4.5'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5/PACKAGES'\n\n\npackage 'ggthemes' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Jin Yao\\AppData\\Local\\Temp\\RtmpGiAJCj\\downloaded_packages\n\n\n\nggthemes installed\nInstalling package into 'C:/Users/Jin Yao/AppData/Local/R/win-library/4.5'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'fontBitstreamVera', 'fontLiberation', 'extrafontdb', 'Rttf2pt1', 'fontquiver', 'extrafont', 'gdtools'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.5/PACKAGES'\n\n\npackage 'fontBitstreamVera' successfully unpacked and MD5 sums checked\npackage 'fontLiberation' successfully unpacked and MD5 sums checked\npackage 'extrafontdb' successfully unpacked and MD5 sums checked\npackage 'Rttf2pt1' successfully unpacked and MD5 sums checked\npackage 'fontquiver' successfully unpacked and MD5 sums checked\npackage 'extrafont' successfully unpacked and MD5 sums checked\npackage 'gdtools' successfully unpacked and MD5 sums checked\npackage 'hrbrthemes' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Jin Yao\\AppData\\Local\\Temp\\RtmpGiAJCj\\downloaded_packages\n\n\n\nhrbrthemes installed\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n###ggrepel - to repel overlapping text\nreplace geom_text() by geom_text_repel() and geom_label() by geom_label_repel\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid =\"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(panel.background = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n1st graph: math(addition of p1 before the code to facilitate patchwork extension later on)\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n2nd graph English(addition of p2 before the code to facilitate patchwork extension later on)\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nCombined graph (addition of p3 before the code to facilitate patchwork extension later on)\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y= ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nin patchwork , + is a 2 column layout\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n(p1 | p2)\n\n\n\n\n\n\n\n\n\n(p1 / p2)\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3/(p1|p2|p3)/(p1+p2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\ninset element - put a small graph at the top or bottom of a bigger chart\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 + p2) / p3\npatchwork + plot_annotation(\n  title = 'Trying out title for 3 graphs',\n  subtitle = 'These 3 plots will reveal something about the data',\n  caption = 'Disclaimer: I\\'m just trying out',\n  tag_levels = c('A','1')) & theme(plot.tag = element_text(size = 8))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork[[1]] &lt;- patchwork[[1]] + plot_layout(tag_level = 'new')\npatchwork + plot_annotation(tag_levels = c('A', '1'))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork + plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ',\n                            tag_sep = '.', tag_suffix = ':')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n###ggrepel - to repel overlapping text\nreplace geom_text() by geom_text_repel() and geom_label() by geom_label_repel\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggplot2-built-in-themes---example-using-theme_gray",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggplot2-built-in-themes---example-using-theme_gray",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid =\"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(panel.background = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n1st graph: math(addition of p1 before the code to facilitate patchwork extension later on)\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n2nd graph English(addition of p2 before the code to facilitate patchwork extension later on)\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nCombined graph (addition of p3 before the code to facilitate patchwork extension later on)\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y= ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nin patchwork , + is a 2 column layout\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n(p1 | p2)\n\n\n\n\n\n\n\n\n\n(p1 / p2)\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3/(p1|p2|p3)/(p1+p2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\ninset element - put a small graph at the top or bottom of a bigger chart\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 + p2) / p3\npatchwork + plot_annotation(\n  title = 'Trying out title for 3 graphs',\n  subtitle = 'These 3 plots will reveal something about the data',\n  caption = 'Disclaimer: I\\'m just trying out',\n  tag_levels = c('A','1')) & theme(plot.tag = element_text(size = 8))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork[[1]] &lt;- patchwork[[1]] + plot_layout(tag_level = 'new')\npatchwork + plot_annotation(tag_levels = c('A', '1'))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork + plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ',\n                            tag_sep = '.', tag_suffix = ':')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my ISSS608 - Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course and the various exercises done during this course."
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "The AvocadoThe Bell Curve"
  }
]