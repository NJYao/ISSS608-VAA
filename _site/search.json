[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my ISSS608 - Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course and the various exercises done during this course.\n\n\n\n\n\n\n\n\nThe Bell Curve"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html",
    "title": "MC1",
    "section": "",
    "text": "Important\n\n\n\nYou are required to install the R packages above, if necessary, before continue to the next step\nCheck packages to ensure they are installed\nCode\npacman::p_load(tidyverse, jsonlite, \n               SmartEDA, tidygraph, \n               ggraph)\n\n#tidygraph to build graph object, to work tgt with ggraph\n#ggplot no need to call out again as its in tidyverse\n\n#SmartEDA library for exploratory data analysis, good to have it to check data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#importing-knowledge-graph-data",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#importing-knowledge-graph-data",
    "title": "MC1",
    "section": "Importing Knowledge Graph Data",
    "text": "Importing Knowledge Graph Data\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nInspect Structure\n\n\nCode\nstr(kg,max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nCode\n#structure enable to check structure of the data\n#good to have this line to check structues of data\n\n\n\n\n\n\n\n\nNote\n\n\n\ndirected - tells you if its a directed graph\nnodes and links are in dataframe- can be read\nCan see data types etc from Environment tab of R-studio - look at the structure\n\nCan open and see the data table\n\n\n\n\n\n\nExtract and Inspect\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes) #kg$ know that pull nodes out\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#initial-eda",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#initial-eda",
    "title": "MC1",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y= `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nCode\n##want to know how many classes available for edge type\n## field names always use ``, not ''\n\n\n\n\nCode\nggplot \n\n\nfunction (data = NULL, mapping = aes(), ..., environment = parent.frame()) \n{\n    UseMethod(\"ggplot\")\n}\n&lt;bytecode: 0x0000015eae606388&gt;\n&lt;environment: namespace:ggplot2&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#creating-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#creating-knowledge-graph",
    "title": "MC1",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mappying from node id to row index\navoid multiple id that have 0 0 but actually they have missing value\nto make sure they have unique id code\nTo reassign ID\ndepends on scenario, may need to subset data first before extracting - depends on use case\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n\n\n\nStep 2: Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map,by = c(\"source\" = \"id\"))%&gt;%\n    rename(from =index) %&gt;%\n    left_join(id_map, by = c(\"target\" = \"id\"))%&gt;%\n    rename(to = index)\n## see data table original source is 0 now become from 1\n\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n#if its directed, true, if not false. BUt in this case there is data to show its directed = true so can reference the data from the data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1.html#visualising-the-knowledge-graph",
    "title": "MC1",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n#once fix this, everytime run random is the same number\n\n\n\nVisualising the Whole Graph\n\n\nCode\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size =2.5) +\n  theme_void()\n\n\n\nStep 1:Filter edges to only “Memberof”\nmining for those “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter (`Edge Type` == \"MemberOf\")\n\n##filter off the edges but the nodes are still there, still a large set of data 17412 as the source\n\n\n\n\nStep 2: Extract only connected nodes (ie used in these edges)\n\n\nCode\n##additional code to remove and only used connected nodes, those that are useful\nused_nodes_indices &lt;- graph_memberof %&gt;%\n  activate(edges)%&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: keep only those node\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_nodes_indices) %&gt;%\n  select(-row_id) # optional cleanup\n\n\n\n\nplot the sub graph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha= 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1)+\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size=2.5)\n\n\n\n\n\n\n\n\n\nCode\n  theme_void()\n\n\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.\nThe data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.\nThe data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1",
    "section": "Loading packages",
    "text": "Loading packages\nThe following R packages are loaded using pacman::p_load() on top of the tidyverse packages:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\npatchwork: an R package for preparing composite figure created using ggplot2.\ndplyr: for data manipulation with the tidyverse package\nscales: for formatting and scaling data plots\nxml12: for working with HTML\nsf: for handling GIS file formats\n\nThe sf and xml12 packages were used as a dataset is extracted from a GEOJSON file later on.\n\npacman::p_load(tidyverse, ggplot2, ggrepel, patchwork, \n               ggthemes,dplyr, xml12, sf, scales)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "Import data",
    "text": "Import data\nThe dataset “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024” retrieved from the Department of Statistics, Singapore (DOS) will be used.\nWe will be importing this dataset as “sgResData24”\n\nsgResData24 &lt;- read_csv(\"data/respopagesex2024.csv\")",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "title": "Take-home Exercise 1",
    "section": "Data pre-processing",
    "text": "Data pre-processing\nWe first take a look at the data and check for:\n\nAny missing/NULL values or entries\nIf any column data types need adjustments\nIf any new columns need to be introduced to be used for visualisations\nAny duplicate entries\n\n\nPreview of the datasetDescriptive StatisticsChecking for duplicate values\n\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\ndim(sgResData24)\n\n[1] 60424     6\n\nhead(sgResData24)\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\nsummary(sgResData24)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time     \n Min.   :   0.0   Min.   :2024  \n 1st Qu.:   0.0   1st Qu.:2024  \n Median :  20.0   Median :2024  \n Mean   :  69.4   Mean   :2024  \n 3rd Qu.:  90.0   3rd Qu.:2024  \n Max.   :1180.0   Max.   :2024  \n\n\n\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\ndistinct(sgResData24)\n\n# A tibble: 60,424 × 6\n   PA         SZ                     Age   Sex       Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024\n# ℹ 60,414 more rows\n\n\nFrom the output of distinct() there are 60,424 x 6 rows returned, showing that there are no duplicated rows in the dataset.\n\n\n\nUsing the count() function, we can view the unique values/names from each column\n\nPA Column CountSZ Column CountAG Column CountSex Column CountTime Column Count\n\n\n\ncount(sgResData24,PA)\n\n# A tibble: 55 × 2\n   PA                          n\n   &lt;chr&gt;                   &lt;int&gt;\n 1 Ang Mo Kio               2184\n 2 Bedok                    1456\n 3 Bishan                    546\n 4 Boon Lay                  728\n 5 Bukit Batok              1638\n 6 Bukit Merah              3094\n 7 Bukit Panjang            1274\n 8 Bukit Timah              1456\n 9 Central Water Catchment   182\n10 Changi                    546\n# ℹ 45 more rows\n\n\nThere are 55 unique planning areas\n\n\n\ncount(sgResData24,SZ)\n\n# A tibble: 332 × 2\n   SZ                         n\n   &lt;chr&gt;                  &lt;int&gt;\n 1 Admiralty                182\n 2 Airport Road             182\n 3 Alexandra Hill           182\n 4 Alexandra North          182\n 5 Aljunied                 182\n 6 Anak Bukit               182\n 7 Anchorvale               182\n 8 Ang Mo Kio Town Centre   182\n 9 Anson                    182\n10 Bahar                    182\n# ℹ 322 more rows\n\n\nThere are 332 unique subzones\n\n\n\ncount(sgResData24,Age)\n\n# A tibble: 91 × 2\n   Age       n\n   &lt;chr&gt; &lt;int&gt;\n 1 0       664\n 2 1       664\n 3 10      664\n 4 11      664\n 5 12      664\n 6 13      664\n 7 14      664\n 8 15      664\n 9 16      664\n10 17      664\n# ℹ 81 more rows\n\n\n\n\n\ncount(sgResData24,Sex)\n\n# A tibble: 2 × 2\n  Sex         n\n  &lt;chr&gt;   &lt;int&gt;\n1 Females 30212\n2 Males   30212\n\n\nThere are only 2 Sex groups - Male and Female\n\n\n\ncount(sgResData24,Time)\n\n# A tibble: 1 × 2\n   Time     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2024 60424\n\n\nThere is only 1 unique group for time, the year 2024, for all the rows in the dataset\n\n\n\n\n\n\n\n\n\n🧐Observations and notes for this dataset\n\n\n\n\nThere are 60,424 rows and 6 columns of data.\nThere are no duplicate rows/ values\nColumn Definition and Unique Values Count 6 Columns (5 Group and 1 Count):\n\nPA (chr type) - Planning Area (55 unique)\nSZ (chr type) - Subzone (332 unique)\nAge (chr type) - Age of Residents (Values: 1 to 89, 90_and_Over)\nSex (chr type) - Sex (2 unique)\nTime (dbl type) - Time/ Period (1 unique)\nPop (dbl type) - Resident Count",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#transforming-and-aggregating-age-column",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#transforming-and-aggregating-age-column",
    "title": "Take-home Exercise 1",
    "section": "Transforming and Aggregating Age Column",
    "text": "Transforming and Aggregating Age Column\nAge column is a chr type column (with “90_and_Over” as one of the values in this column). From the Age column create 2 new columns so that we can use them for our data visualisations later on:\n\nAge_num - introduced column that transforms the data type of the Age column from chr type to dbl type. Additionally, “90_and_Over” is converted to the value 90.\nAge_group - aggregating the age groups of the population together using 10 year intervals\n\nThis is performed using the mutate() and case_when() functions.\n\nsgResData24 &lt;- sgResData24 %&gt;%\n  mutate(\n    # Convert age to numeric, handle \"90_and_Over\"\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ suppressWarnings(as.numeric(Age))  # Avoid warnings from \"90_and_Over\"\n    ),\n    \n    # Group into age bands\n    Age_group = case_when(\n      Age_num &gt;= 0 & Age_num &lt;= 9   ~ \"0-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 19 ~ \"10-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 29 ~ \"20-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 39 ~ \"30-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 49 ~ \"40-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 59 ~ \"50-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 69 ~ \"60-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 79 ~ \"70-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 89 ~ \"80-89\",\n      Age_num &gt;= 90                ~ \"90+\",\n      TRUE                         ~ NA_character_\n    )\n  )\n\nWe can then check our adjusted dataset using the print() function below:\n\nprint(sgResData24)\n\n# A tibble: 60,424 × 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ℹ 60,414 more rows",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aggregate-planning-area-pa-column-into-nsew-central-regions-of-singapore",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aggregate-planning-area-pa-column-into-nsew-central-regions-of-singapore",
    "title": "Take-home Exercise 1",
    "section": "Aggregate Planning Area (PA Column) into NSEW & Central Regions of Singapore",
    "text": "Aggregate Planning Area (PA Column) into NSEW & Central Regions of Singapore\nReferencing the URA 2019 masterplan map, we can group the Planning Areas into the different North, South, East, West and Central regions of Singapore.\nWe reference this from the GEOJSON data obtained from this data.gov.sg website link.\n\nExtracting the Town(PA) and Region data from the GeoJSON file\nThe sf package is used here to help extract the spatial vector data from the GEOJSON data to extract the Town and Regions of Singapore.\n\n#Install required packages if not already installed\nlibrary(sf)\nlibrary(xml2)\nlibrary(dplyr)\n\n# Load the GeoJSON file\ngeo_data &lt;- st_read(\"data/MasterPlan2019PlanningAreaBoundaryNoSea.geojson\")\n\nReading layer `MasterPlan2019PlanningAreaBoundaryNoSea' from data source \n  `C:\\NJYao\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex01\\data\\MasterPlan2019PlanningAreaBoundaryNoSea.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n# Function to parse HTML and extract PLN_AREA_N and REGION_N\nextract_info &lt;- function(html_str) {\n  doc &lt;- read_html(html_str)\n  rows &lt;- xml_find_all(doc, \".//tr\")\n\n  # Loop through rows and extract key-value pairs\n  data &lt;- lapply(rows, function(row) {\n    th &lt;- xml_text(xml_find_first(row, \".//th\"))\n    td &lt;- xml_text(xml_find_first(row, \".//td\"))\n    if (!is.na(th) && !is.na(td)) {\n      return(setNames(list(td), th))\n    } else {\n      return(NULL)\n    }\n  })\n\n  # Combine and extract specific fields\n  info &lt;- do.call(c, data)\n  list(\n    Town = info[[\"PLN_AREA_N\"]],\n    Region = info[[\"REGION_N\"]]\n  )\n}\n\n\n# Apply the extraction function to each row\ninfo_list &lt;- lapply(geo_data$Description, extract_info)\n\n# Combine results into a data frame\ninfo_df &lt;- bind_rows(info_list) %&gt;% distinct() %&gt;% arrange(Region, Town)\n\n# View result\nprint(info_df)\n\n# A tibble: 55 × 2\n   Town          Region        \n   &lt;chr&gt;         &lt;chr&gt;         \n 1 BISHAN        CENTRAL REGION\n 2 BUKIT MERAH   CENTRAL REGION\n 3 BUKIT TIMAH   CENTRAL REGION\n 4 DOWNTOWN CORE CENTRAL REGION\n 5 GEYLANG       CENTRAL REGION\n 6 KALLANG       CENTRAL REGION\n 7 MARINA EAST   CENTRAL REGION\n 8 MARINA SOUTH  CENTRAL REGION\n 9 MARINE PARADE CENTRAL REGION\n10 MUSEUM        CENTRAL REGION\n# ℹ 45 more rows\n\n\nFrom the output of the above print(info_df), we have a 55x2 table of “Town” and “Region” which we can then use for joining with our sgResData24 dataset.\nTo prepare our data for joining we first transform our sgResData24 dataset’s “PA” column data to uppercase to match the info_df dataset “Town” data for joining later\n\nsgResData24 %&gt;% mutate(PA = toupper(PA))\n\n# A tibble: 60,424 × 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1 ANG MO KIO Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 ANG MO KIO Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 ANG MO KIO Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 ANG MO KIO Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 ANG MO KIO Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 ANG MO KIO Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 ANG MO KIO Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 ANG MO KIO Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 ANG MO KIO Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 ANG MO KIO Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ℹ 60,414 more rows\n\n\nAdditionally, we rename the info_df dataset’s “Town” column into “PA” using the mutate() function.\nWe can then perform a left_join of the sgResData24 “PA” column with the info_df dataset’s “PA” column to introduce the Region Column into sgResData24 dataset.\n\nlibrary(dplyr)\n\n# Rename Town to PA in the region info dataframe\nregion_info &lt;- info_df %&gt;% rename(PA = Town)\n\n# left join sgResData24 with region_info to get Region column\nsgResData24 &lt;- sgResData24 %&gt;% mutate(PA = toupper(PA)) %&gt;%\n  left_join(region_info, by = \"PA\")\n\nprint(sgResData24)\n\n# A tibble: 60,424 × 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n 1 ANG MO KIO Ang Mo Kio Town … 0     Males    10  2024       0 0-9       NORTH…\n 2 ANG MO KIO Ang Mo Kio Town … 0     Fema…    10  2024       0 0-9       NORTH…\n 3 ANG MO KIO Ang Mo Kio Town … 1     Males    10  2024       1 0-9       NORTH…\n 4 ANG MO KIO Ang Mo Kio Town … 1     Fema…    10  2024       1 0-9       NORTH…\n 5 ANG MO KIO Ang Mo Kio Town … 2     Males    10  2024       2 0-9       NORTH…\n 6 ANG MO KIO Ang Mo Kio Town … 2     Fema…    10  2024       2 0-9       NORTH…\n 7 ANG MO KIO Ang Mo Kio Town … 3     Males    10  2024       3 0-9       NORTH…\n 8 ANG MO KIO Ang Mo Kio Town … 3     Fema…    10  2024       3 0-9       NORTH…\n 9 ANG MO KIO Ang Mo Kio Town … 4     Males    30  2024       4 0-9       NORTH…\n10 ANG MO KIO Ang Mo Kio Town … 4     Fema…    10  2024       4 0-9       NORTH…\n# ℹ 60,414 more rows\n\n\nThe output of print(sgResData24) shows the addition of the “Region” column.\nWe can perform the checks performed above to verify that the new columns introduced do not have any issues before proceeding with the visualisations.\n\nPreview of the datasetDescriptive StatisticsChecking for duplicate values\n\n\nThe dim() and head() functions to view the dimensions and preview the first few rows of the dataset using the code below:\n\ndim(sgResData24)\n\n[1] 60424     9\n\nhead(sgResData24)\n\n# A tibble: 6 × 9\n  PA         SZ                 Age   Sex     Pop  Time Age_num Age_group Region\n  &lt;chr&gt;      &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n1 ANG MO KIO Ang Mo Kio Town C… 0     Males    10  2024       0 0-9       NORTH…\n2 ANG MO KIO Ang Mo Kio Town C… 0     Fema…    10  2024       0 0-9       NORTH…\n3 ANG MO KIO Ang Mo Kio Town C… 1     Males    10  2024       1 0-9       NORTH…\n4 ANG MO KIO Ang Mo Kio Town C… 1     Fema…    10  2024       1 0-9       NORTH…\n5 ANG MO KIO Ang Mo Kio Town C… 2     Males    10  2024       2 0-9       NORTH…\n6 ANG MO KIO Ang Mo Kio Town C… 2     Fema…    10  2024       2 0-9       NORTH…\n\n\n\n\nThe summary() function is used to view the basic descriptive statistics for each column, including the minimum, maximum, mean and quartiles.\n\nsummary(sgResData24)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time         Age_num    Age_group        \n Min.   :   0.0   Min.   :2024   Min.   : 0   Length:60424      \n 1st Qu.:   0.0   1st Qu.:2024   1st Qu.:22   Class :character  \n Median :  20.0   Median :2024   Median :45   Mode  :character  \n Mean   :  69.4   Mean   :2024   Mean   :45                     \n 3rd Qu.:  90.0   3rd Qu.:2024   3rd Qu.:68                     \n Max.   :1180.0   Max.   :2024   Max.   :90                     \n    Region         \n Length:60424      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\nThe distinct() function is used to check if there are any duplicate values. The distinct() function returns unique rows.\n\ndistinct(sgResData24)\n\n# A tibble: 60,424 × 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n 1 ANG MO KIO Ang Mo Kio Town … 0     Males    10  2024       0 0-9       NORTH…\n 2 ANG MO KIO Ang Mo Kio Town … 0     Fema…    10  2024       0 0-9       NORTH…\n 3 ANG MO KIO Ang Mo Kio Town … 1     Males    10  2024       1 0-9       NORTH…\n 4 ANG MO KIO Ang Mo Kio Town … 1     Fema…    10  2024       1 0-9       NORTH…\n 5 ANG MO KIO Ang Mo Kio Town … 2     Males    10  2024       2 0-9       NORTH…\n 6 ANG MO KIO Ang Mo Kio Town … 2     Fema…    10  2024       2 0-9       NORTH…\n 7 ANG MO KIO Ang Mo Kio Town … 3     Males    10  2024       3 0-9       NORTH…\n 8 ANG MO KIO Ang Mo Kio Town … 3     Fema…    10  2024       3 0-9       NORTH…\n 9 ANG MO KIO Ang Mo Kio Town … 4     Males    30  2024       4 0-9       NORTH…\n10 ANG MO KIO Ang Mo Kio Town … 4     Fema…    10  2024       4 0-9       NORTH…\n# ℹ 60,414 more rows",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-plot-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-plot-visualisation",
    "title": "Take-home Exercise 1",
    "section": "Population Pyramid Plot Visualisation",
    "text": "Population Pyramid Plot Visualisation\nPlotting Age Group against the Population Count using a population pyramid\nThe ggplot and dplyr library will be used for this visualisation.\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values for each group in the population pyramid using mutate(), summarise() and group_by() functions. Then we set the levels for the Age_groups so that the axis labels will be ordered in ascending order. The Pop values for the Males then have to be flipped into -ve values by using the mutate() and ifelse() functions.\nThe population pyramid is then plot using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as defining the fill to show segregate the plot by Sex.There are also data labels added for the % of total population and count for each group of the pyramid plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# Summarise and compute plot values\npop_pyramid &lt;- sgResData24 %&gt;%\n  group_by(Age_group, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100) %&gt;%\n  ungroup()\n\n# Order Age_group for proper vertical alignment\nage_levels &lt;- c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90+\")\npop_pyramid$Age_group &lt;- factor(pop_pyramid$Age_group, levels = age_levels)\n\n# Flip male values to negative\npop_pyramid &lt;- pop_pyramid %&gt;%\n  mutate(Pop_plot = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = paste0(comma(abs(Pop)), \"\\n(\", round(abs(Percent), 1), \"%)\"))\n\n# Plot\nggplot(pop_pyramid, aes(x = Age_group, y = Pop_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, position = \"identity\") +\n  coord_flip() +\n  geom_text(aes(label = Label),\n            position = position_nudge(y = ifelse(pop_pyramid$Sex == \"Males\", -50000, 10000)),\n            hjust = ifelse(pop_pyramid$Sex == \"Male\", 1, 0),\n            size = 4, color = 'black') +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  scale_fill_manual(values = c(\"Males\" = \"#619CFF\", \"Females\" = \"#F8766D\")) +\n  labs(title = \"Population vs Age Group & Sex\",\n       subtitle = \"                                                   Males                                                                                      Females\",\n       x = \"Age Group\", y = \"Population Count\") +\n  theme_minimal()+\n  theme(\n    plot.margin = margin(10, 20, 20, 20),  # top, right, bottom, left\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n    plot.subtitle = element_text(size = 14)\n    )\n\n\n\n\n\nObservation from the Plot\nFrom the population pyramid chart, we can observe that the Age group of 30-39 has the largest population (14.9% + 15.4% of the overall population), and the largest population for both males and females respectively as well.\nWe can also observe an aging population based on the shape of the population pyramid chart, with the 0-9, 10-19 and 20-29 Age group populations being lesser than the 30-39 Age group.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-visualisation-of-region-vs-population-and-sex",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-visualisation-of-region-vs-population-and-sex",
    "title": "Take-home Exercise 1",
    "section": "Bar Chart Visualisation of Region vs Population and Sex",
    "text": "Bar Chart Visualisation of Region vs Population and Sex\nPlotting Region vs Population and Sex.\nThe ggplot and dplyr library will be used for this visualisation.\nWe first calculate the total population by summing the Pop and calculate other the values that will be used for labelling values (the % and total group count) for each group in the bar chart using mutate(), summarise() and group_by() functions.\nThe bar chart is then plotted using ggplot, with the respective packages to adjust the aesthetic aspects of the plot such as the addition of the total count and percentages for Males and Females within each group.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Compute total population by Region and Sex\nstacked_data_region &lt;- sgResData24 %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(Region) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100)\n\n#Compute total population for each Region group (for total label)\nlabels_data_region &lt;- stacked_data_region %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop))\n\n#Plot stacked bars with percent labels inside and total on top\n  ggplot(stacked_data_region, aes(x = Region, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Percent), \"%\")), \n            position = position_stack(vjust = 0.5), size = 5, color = \"white\") +\n  geom_text(data = labels_data_region, aes(x = Region, y = Pop, label = comma(Pop)), \n            vjust = -0.5, size = 5, inherit.aes = FALSE) +\n  labs(x = \"Region\", y = \"Population\", title = \"Population vs Region & Sex\") +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),# Rotate x-axis labels and adjust alignment\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n    legend.position = 'bottom', legend.text = element_text(size=12),\n    legend.title = element_text(size = 14)\n  )\n\n\n\n\n\nObservation from the Plot\nFrom the Bar chart, we can observe that the North-East Region has the highest population, followed by the Central and then West region. Based on the percentages observed for all 5 regions, we can also tell that there are more Females than Male in the population, with Males having 48 to 49% and Females having 51 to 52%. It can also be observed that the West Region has a greater proportion of Females(52%) compared to Males(48%).",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#half-eye-box-plot-visualisation-of-age-vs-region",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#half-eye-box-plot-visualisation-of-age-vs-region",
    "title": "Take-home Exercise 1",
    "section": "Half-eye + Box Plot Visualisation of Age vs Region",
    "text": "Half-eye + Box Plot Visualisation of Age vs Region\nPlotting the Distribution of Age vs Region\nThe ggplot, dplyr and ggdist library will be used for this visualisation.\nWe first calculate the mean for each group to label the weighted means in the visualisation (using Age_num and Pop as the weight).\nThe chart is then plotted using ggplot to plot a half-eye plot (together with ggdist) and boxplot together. The other respective packages are used to adjust the aesthetics of the plo such as ith the weighted mean calculated earlier indicated with a red point in each boxplot using geompoint(). Each Region group is also assigned a different colour to help differentiate each group visually.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggdist)\n\n# Compute weighted mean for each region\nmean_labels &lt;- sgResData24 %&gt;%\n  group_by(Region) %&gt;%\n  summarise(mean_age = weighted.mean(Age_num, Pop))\n\n# Plot with mean labels\nggplot(sgResData24, aes(x = Region, y = Age_num, fill = Region)) +\n  stat_halfeye(\n    aes(weight = Pop, fill = Region),\n    adjust = 0.5,\n    width = 0.6,\n    justification = -0.3,\n    .width = 0,\n    point_colour = NA\n  ) +\n  geom_point (data = mean_labels, aes(x = Region, y = mean_age), shape = 20, size = 5, color = \"red\") +\n  geom_boxplot(\n    width = .12,\n    outlier.shape = NA,\n    alpha = 0.6\n  ) +\n  geom_text(\n    data = mean_labels,\n    aes(x = Region, y = mean_age, label = round(mean_age, 1)),\n    #vjust = -0.8,\n    hjust = 1.7,\n    color = \"red\",\n    fontface = \"bold\",\n    size = 4\n  ) +\n  scale_y_continuous(breaks = seq(0, max(sgResData24$Age_num), by = 10))+ \n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 12),# Rotate x-axis labels and adjust alignment\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    plot.title = element_text(size = 18),\n  ) +\n  labs(x = \"Region\", y = \"Age\", title = \"Distribution of Age vs Region\")\n\n\n\n\n\n\n\n\n\n\nUse The Correct Data Variable with Correct Data Type\n\n\n\nUse Age_num (dbl type) instead of Age (chr type) for this Distribution plot\n\n\n\nObservation from the Plot\nWe can view that the distribution of the age of the population across the region is the same, with roughly the same median as well based on the boxplot median position. However, it can be observed that the mean age are different for each region, with Central having the highest(44.1), followed by East(42.6) and West(41.6). The higher mean in Central Region may indicate a greater proportion of older people living in these areas compared to other Regions.\nThis can also be observed from the distribution seen with the half-eye plot, where the end of the distribution graph shows a higher distribution of population above the age of around 80 compared to the other regions as shown in the screenshot below:",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.\n\n\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n\n\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\nThe code chunk below will be used to perform the changes.\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nCode\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\n\n\n\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.\n\n\n\n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n\n\n\n\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that you must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated) \n\n\n\n\n\n\nCode\n#this is the part which makes it a force directed network graph\n\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\n\nCode\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visOption’s argument.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\nThe code chunk below will be used to perform the changes.\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nCode\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Another very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that you must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "visNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated) \n\n\n\n\n\n\nCode\n#this is the part which makes it a force directed network graph\n\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\n\nCode\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visOption’s argument.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive. plotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task:\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nThe Exam_data.csv is provided to us. Using read_csv() from the readr package, we import Exam_data.csv into R. This will save it as a tibble data frame called exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nThe CodeThe Plot\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nNote in the graph above section, by scrolling over the data points, the student’s ID will be displayed\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nThe CodeThe Plot\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nfirst three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nThe CodeThe Plot\n\n\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                               \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                                                                    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                                                                       \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below. ::: {.panel-tabset}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n:::\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive. plotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task:\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The Exam_data.csv is provided to us. Using read_csv() from the readr package, we import Exam_data.csv into R. This will save it as a tibble data frame called exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nThe CodeThe Plot\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Note in the graph above section, by scrolling over the data points, the student’s ID will be displayed\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nThe CodeThe Plot\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nfirst three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nThe CodeThe Plot\n\n\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                               \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                                                                    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                                                                       \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below. ::: {.panel-tabset}",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-code-3",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-code-3",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "p1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n:::\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on Exercise 3",
    "section": "Overview",
    "text": "Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\nBasic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n ### Terminology Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "Hands-on Exercise 3",
    "section": "Getting started",
    "text": "Getting started\n\nLoading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImporting the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#things-to-note-from-the-code-chunk-above",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#things-to-note-from-the-code-chunk-above",
    "title": "Hands-on Exercise 3",
    "section": "Things to note from the code chunk above",
    "text": "Things to note from the code chunk above\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs. (2nd last line)\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3",
    "section": "Animated Data Visualisation: gganimate methods",
    "text": "Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_()/exit_() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\nBuilding the animated bubble plot\nIn the code chunk below,\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year). ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart:",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3",
    "section": "Animated Data visualisation: plotly",
    "text": "Animated Data visualisation: plotly\n\nBuilding an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code\n\n\n#| echo: false\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n#| echo: false\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\nThings to learn from the code chunk above\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code\n\n\n#| echo: false\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n#| eval: false\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code\n\n\n#| echo: false\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n#| eval: false\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#things-to-learn-from-the-code-chunk-above",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#things-to-learn-from-the-code-chunk-above",
    "title": "Hands-on Exercise 3",
    "section": "Things to learn from the code chunk above",
    "text": "Things to learn from the code chunk above\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n###ggrepel - to repel overlapping text\nreplace geom_text() by geom_text_repel() and geom_label() by geom_label_repel\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid =\"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(panel.background = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n1st graph: math(addition of p1 before the code to facilitate patchwork extension later on)\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n2nd graph English(addition of p2 before the code to facilitate patchwork extension later on)\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nCombined graph (addition of p3 before the code to facilitate patchwork extension later on)\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y= ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nin patchwork , + is a 2 column layout\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n(p1 | p2)\n\n\n\n\n\n\n\n\n\n(p1 / p2)\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3/(p1|p2|p3)/(p1+p2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\ninset element - put a small graph at the top or bottom of a bigger chart\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 + p2) / p3\npatchwork + plot_annotation(\n  title = 'Trying out title for 3 graphs',\n  subtitle = 'These 3 plots will reveal something about the data',\n  caption = 'Disclaimer: I\\'m just trying out',\n  tag_levels = c('A','1')) & theme(plot.tag = element_text(size = 8))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork[[1]] &lt;- patchwork[[1]] + plot_layout(tag_level = 'new')\npatchwork + plot_annotation(tag_levels = c('A', '1'))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork + plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ',\n                            tag_sep = '.', tag_suffix = ':')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n###ggrepel - to repel overlapping text\nreplace geom_text() by geom_text_repel() and geom_label() by geom_label_repel\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggplot2-built-in-themes---example-using-theme_gray",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggplot2-built-in-themes---example-using-theme_gray",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid =\"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(panel.background = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n1st graph: math(addition of p1 before the code to facilitate patchwork extension later on)\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n2nd graph English(addition of p2 before the code to facilitate patchwork extension later on)\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nCombined graph (addition of p3 before the code to facilitate patchwork extension later on)\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y= ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nin patchwork , + is a 2 column layout\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n(p1 | p2)\n\n\n\n\n\n\n\n\n\n(p1 / p2)\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3/(p1|p2|p3)/(p1+p2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\ninset element - put a small graph at the top or bottom of a bigger chart\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 + p2) / p3\npatchwork + plot_annotation(\n  title = 'Trying out title for 3 graphs',\n  subtitle = 'These 3 plots will reveal something about the data',\n  caption = 'Disclaimer: I\\'m just trying out',\n  tag_levels = c('A','1')) & theme(plot.tag = element_text(size = 8))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork[[1]] &lt;- patchwork[[1]] + plot_layout(tag_level = 'new')\npatchwork + plot_annotation(tag_levels = c('A', '1'))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork + plot_annotation(tag_levels = c('A', '1'), tag_prefix = 'Fig. ',\n                            tag_sep = '.', tag_suffix = ':')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nadjust the legend:\n\n# Create the funnel plot object\nfp &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05)\n)\n\n# Extract the ggplot object from the funnelplot object\np &lt;- fp$plot\n\n# Modify legend layout\nlibrary(ggplot2)\np + \n  guides(linetype = guide_legend(nrow = 2), \n         colour = guide_legend(nrow = 2)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n    legend.text = element_text(size = 5)\n  )\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nAdjust the legend\n\n# Create the funnel plot object\nfp &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n# Extract the ggplot object from the funnelplot object\np &lt;- fp$plot\n\n# Modify legend layout\np + \n  guides(linetype = guide_legend(nrow = 2), \n         colour = guide_legend(nrow = 2)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n     legend.text = element_text(size = 5),\n     plot.title = element_text(size = 10, face = \"bold\", hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nadjust the legend:\n\n# Create the funnel plot object\nfp &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05)\n)\n\n# Extract the ggplot object from the funnelplot object\np &lt;- fp$plot\n\n# Modify legend layout\nlibrary(ggplot2)\np + \n  guides(linetype = guide_legend(nrow = 2), \n         colour = guide_legend(nrow = 2)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n    legend.text = element_text(size = 5)\n  )\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nAdjust the legend\n\n# Create the funnel plot object\nfp &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n# Extract the ggplot object from the funnelplot object\np &lt;- fp$plot\n\n# Modify legend layout\np + \n  guides(linetype = guide_legend(nrow = 2), \n         colour = guide_legend(nrow = 2)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n     legend.text = element_text(size = 5),\n     plot.title = element_text(size = 10, face = \"bold\", hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "title": "Hands-on Exercise 4",
    "section": "Learning Outcome",
    "text": "Learning Outcome\nVisualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statis tical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\nData import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Distribution with Ridgeline Plot",
    "text": "Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4",
    "section": "Plotting ridgeline graph: ggridges method",
    "text": "Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code\n\n\n\n#|echo: false\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n#|eval: false\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4",
    "section": "Varying fill colors along the x axis",
    "text": "Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\nMapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\nRidgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Distribution with Raincloud Plot",
    "text": "Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n9.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\nAdding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\nFinishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-1",
    "title": "Hands-on Exercise 4",
    "section": "Learning Outcome",
    "text": "Learning Outcome\nIn this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4",
    "section": "Visual Statistical Analysis with ggstatsplot",
    "text": "Visual Statistical Analysis with ggstatsplot\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n-   To provide alternative statistical inference methods by default. \n-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "title": "Hands-on Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImporting data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nprint(exam)\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\nOne-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nUnpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nHow to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\n\n\nTwo-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\nTrying out with Parametric\n\n#Trying out in class teachings\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"p\", #adjust from np(non-parametric) to p (parametric). label change to show   mean instead of median, changes the statistical test and results accordingly\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nTrying out with Robust\n\n#Trying out in class teachings\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"r\", # r for robust - mean trimmed outliers are trimmed if there are any of them\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nggbetweenstats - Summary of tests\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\nTrying out Marginal plots in class\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Dependence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\nIn class: For categorical data, recommended to use mosaic plots, by default ggstatplot will use bar chart. benefit, width of mosaic plot represents quantity variation - more variation or observations if wider.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-2",
    "title": "Hands-on Exercise 4",
    "section": "Learning Outcome",
    "text": "Learning Outcome\nVisualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "title": "Hands-on Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\nData import\nFor the purpose of this exercise, Exam_data.csv will be used.\nThis data was previously loaded.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\nPlotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Uncertainty: ggdist package",
    "text": "Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nNote\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nInstalling ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n# can input {r eval=FALSE} so that it won't keep running whenever render or run all\n\nNote: You only need to perform this step once.\n\n\nLaunch the application in R\n\nlibrary(ungeviz)\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\nWrite a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      axis.text =  element_text(size = 14),\n      plot.title = element_text(size = 16,hjust = 0.5),\n      legend.title = element_text(size = 12,vjust = 0.8),\n      legend.text = element_text(size = 12,vjust = 0.5),\n      legend.key.size = unit(2, \"lines\"),\n      legend.position=\"bottom\") #move legend to bottom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\n\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 10),\n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(size = 16, hjust = 0.5),\n        strip.text = element_text(size=14),\n        legend.title = element_text(size = 12,vjust = 0.9),\n        legend.text = element_text(size = 12, angle = 90,vjust = 0.5),\n        legend.position=\"bottom\") #move legend to bottom\n\n\n\n\nAttempt to change layout of multiple plots\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"helvetica\") + \n  #coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, scales = \"free\", ncol = 1) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(size = 16, hjust = 0.5),\n        strip.text = element_text(size=14),\n        legend.title = element_text(size = 12,vjust = 0.9),\n        legend.text = element_text(size = 12, angle = 90,vjust = 0.5),\n        legend.position=\"bottom\", #move legend to bottom\n        )\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"helvetica\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),#adjust to make labels neater\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_line(color = \"grey90\")\n        ) \n\n\n\n\n\n\n\n\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrice %&gt;%\n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961,1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Ng Jin Yao\",\n                YTextSize = 4, #increase Y axis and datapoint text size\n                DataTextSize = 3 \n  )\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      axis.text =  element_text(size = 14),\n      plot.title = element_text(size = 16,hjust = 0.5),\n      legend.title = element_text(size = 12,vjust = 0.8),\n      legend.text = element_text(size = 12,vjust = 0.5),\n      legend.key.size = unit(2, \"lines\"),\n      legend.position=\"bottom\") #move legend to bottom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\n\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 10),\n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(size = 16, hjust = 0.5),\n        strip.text = element_text(size=14),\n        legend.title = element_text(size = 12,vjust = 0.9),\n        legend.text = element_text(size = 12, angle = 90,vjust = 0.5),\n        legend.position=\"bottom\") #move legend to bottom\n\n\n\n\nAttempt to change layout of multiple plots\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"helvetica\") + \n  #coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, scales = \"free\", ncol = 1) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(size = 16, hjust = 0.5),\n        strip.text = element_text(size=14),\n        legend.title = element_text(size = 12,vjust = 0.9),\n        legend.text = element_text(size = 12, angle = 90,vjust = 0.5),\n        legend.position=\"bottom\", #move legend to bottom\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"helvetica\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),#adjust to make labels neater\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_line(color = \"grey90\")\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrice %&gt;%\n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961,1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Ng Jin Yao\",\n                YTextSize = 4, #increase Y axis and datapoint text size\n                DataTextSize = 3 \n  )\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selecting one submission provided by your classmate, critic three good design principles and three areas for further improvement. With reference to the comment, prepare the makeover version of the data visualisation.\n\n\n\n\nSelected Visualisation: Marga Thura: Section 3, Plot 2\n\n\n\n\n\n\n\n\nUsage of thousands separator in data labels and axis to improve readability for numbers\nX-axis labels are tilted in an angle to help with readability for the Planning Area groups\nSoft gridlines with a lighter shade than the barchart bar fill colors are used that do not distract from the main barchart data\n\n\n\n\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics\n\n\n\n\n\nI replicated the data loading and cleaning of data using the code provided from Marga’s Take-home Exercise 1 page:\n\n# Load necessary library\nlibrary(readr)\n\n# Read the CSV file from the specified relative path\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, \n               hrbrthemes, patchwork, \n               haven, ggiraph, plotly, DT, \n               knitr, scales,\n               ggridges, ggpubr, \n               gganimate, gapminder, ggdist, \n               ggtext, ggalt,\n               cowplot)\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n# Load the dataset\nrespop &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Convert types and clean\nrespop_clean &lt;- respop %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = as.numeric(Age),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ),\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  ) %&gt;%\n  filter(!is.na(Pop), Pop &gt; 0)\nprint(respop_clean)\n\n# A tibble: 37,243 × 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;fct&gt;      &lt;fct&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ℹ 37,233 more rows\n\n\n\n\n\n\n\n\nAdjustment Made:\n\n\n\nMade an adjustment to use the cleaned dataset which was cleaned above for the summary\n\n\n\n  library(readr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n\n  # Load and summarize population data\n  # respopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n  #pop_by_pa &lt;- respopagesex2024 %&gt;% \n  pop_by_pa &lt;- respop_clean %&gt;%  #adjusted to use the cleaned dataset\n    mutate(Pop = as.numeric(Pop)) %&gt;%\n    filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n    group_by(PA) %&gt;%\n    summarise(Total_Pop = sum(Pop, na.rm = TRUE))\n\n  # Check population range\n  print(summary(pop_by_pa$Total_Pop))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    140    8432   94700   99846  157685  284950 \n\n\n\n\n\n\nAdjustments I have made to Marga’s original graph based on the 3 Areas of Improvement feedback:\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page:\n\n\n\n\n\n\n\nAdjustment #1:\n\n\n\nAdjusted fill color for geombar plot from “grey70” to a darker “grey40”.\n\n\n\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area:\n\n\n\n\n\n\n\nAdjustment #2:\n\n\n\nAdjusted geom_text hjust and vjust values to centre data labels to the respective bars in the chart\n\n\n\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics:\n\n\n\n\n\n\n\nAdjustment #3:\n\n\n\n\nFlipped the axis for population and planning area for better clarity\nAdjusted the visualisation to generate plot1 for top 10 population PAs and plot2 for bottom 10 population PAs. Then generated a composite figure of plot1 and plot2 together using the patchwork extension\nOther miscellaneous adjustments to text size, axis limits to accommodate aesthetic adjustments for plot1, plot2 and the composite graph such as removing the horizontal axis and adjusting text size.\n\n\n\n\nComposite Visualisation (using patchwork)Cleaning CodeCreating Bar Chart for Top 10 PAsCreating Bar Chart for Bottom 10 PAs\n\n\n\nlibrary(patchwork)\nplot1 / plot2\n\n\n\n\n\n\n\n\n\n\n\n# Disable scientific notation globally\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Trim whitespace from PA and SZ\nrespopagesex2024 &lt;- respopagesex2024 %&gt;%\n  mutate(\n    PA = trimws(PA),\n    SZ = trimws(SZ)\n  )\n\n# Clean and summarize population by PA, including subzone count\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)  # Count unique subzones per PA\n  ) %&gt;%\n  arrange(desc(Total_Pop))\n\n\n\n\n# Create bar chart for top 10\ntop_n &lt;- 10  \ntop_pa &lt;- pop_by_pa %&gt;%\n  slice_max(order_by = Total_Pop, n = top_n)\n\nplot1 &lt;- ggplot(data = top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Top\", top_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 325000, by = 50000),\n  limits = c(0, 325000)\n)\n\nprint(plot1)\n\n\n\n\n\n\n\n\n\n\n\n# Create bar chart for btm 10\nbtm_n &lt;- 10  # \nbtm_pa &lt;- pop_by_pa %&gt;%\n  slice_min(order_by = Total_Pop, n = btm_n)\n\nplot2 &lt;- ggplot(data = btm_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Bottom\", btm_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 4750, by = 1000),\n  limits = c(0, 4750)\n)\n\nprint(plot2)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#the-task",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selecting one submission provided by your classmate, critic three good design principles and three areas for further improvement. With reference to the comment, prepare the makeover version of the data visualisation.",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#selected-visualisation-and-feedback",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#selected-visualisation-and-feedback",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Selected Visualisation: Marga Thura: Section 3, Plot 2\n\n\n\n\n\n\n\n\nUsage of thousands separator in data labels and axis to improve readability for numbers\nX-axis labels are tilted in an angle to help with readability for the Planning Area groups\nSoft gridlines with a lighter shade than the barchart bar fill colors are used that do not distract from the main barchart data\n\n\n\n\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#replicating-data-loading-and-cleaning.",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#replicating-data-loading-and-cleaning.",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "I replicated the data loading and cleaning of data using the code provided from Marga’s Take-home Exercise 1 page:\n\n# Load necessary library\nlibrary(readr)\n\n# Read the CSV file from the specified relative path\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, \n               hrbrthemes, patchwork, \n               haven, ggiraph, plotly, DT, \n               knitr, scales,\n               ggridges, ggpubr, \n               gganimate, gapminder, ggdist, \n               ggtext, ggalt,\n               cowplot)\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n# Load the dataset\nrespop &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Convert types and clean\nrespop_clean &lt;- respop %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = as.numeric(Age),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ),\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  ) %&gt;%\n  filter(!is.na(Pop), Pop &gt; 0)\nprint(respop_clean)\n\n# A tibble: 37,243 × 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;fct&gt;      &lt;fct&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ℹ 37,233 more rows\n\n\n\n\n\n\n\n\nAdjustment Made:\n\n\n\nMade an adjustment to use the cleaned dataset which was cleaned above for the summary\n\n\n\n  library(readr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n\n  # Load and summarize population data\n  # respopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n  #pop_by_pa &lt;- respopagesex2024 %&gt;% \n  pop_by_pa &lt;- respop_clean %&gt;%  #adjusted to use the cleaned dataset\n    mutate(Pop = as.numeric(Pop)) %&gt;%\n    filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n    group_by(PA) %&gt;%\n    summarise(Total_Pop = sum(Pop, na.rm = TRUE))\n\n  # Check population range\n  print(summary(pop_by_pa$Total_Pop))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    140    8432   94700   99846  157685  284950",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#makeover-version-of-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01P2/Take-home_Ex01P2.html#makeover-version-of-visualisation",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "Adjustments I have made to Marga’s original graph based on the 3 Areas of Improvement feedback:\n\nChoice of color for the bars - a darker color can be used to further improve the contrast of the bar graph from the page:\n\n\n\n\n\n\n\nAdjustment #1:\n\n\n\nAdjusted fill color for geombar plot from “grey70” to a darker “grey40”.\n\n\n\nAlignment of Data labels with respective bars and data labels can be adjusted so that the labels do not exceed the plot area:\n\n\n\n\n\n\n\nAdjustment #2:\n\n\n\nAdjusted geom_text hjust and vjust values to centre data labels to the respective bars in the chart\n\n\n\nCurrent graph has too many groups and the number difference is too wide, affecting the scaling and readability of the data labels - the graphs can be split to focus on top and bottom 10 populations to improve clarity as it allows graphs to show lesser groups and adjust scaling accordingly to improve the aesthetics:\n\n\n\n\n\n\n\nAdjustment #3:\n\n\n\n\nFlipped the axis for population and planning area for better clarity\nAdjusted the visualisation to generate plot1 for top 10 population PAs and plot2 for bottom 10 population PAs. Then generated a composite figure of plot1 and plot2 together using the patchwork extension\nOther miscellaneous adjustments to text size, axis limits to accommodate aesthetic adjustments for plot1, plot2 and the composite graph such as removing the horizontal axis and adjusting text size.\n\n\n\n\nComposite Visualisation (using patchwork)Cleaning CodeCreating Bar Chart for Top 10 PAsCreating Bar Chart for Bottom 10 PAs\n\n\n\nlibrary(patchwork)\nplot1 / plot2\n\n\n\n\n\n\n\n\n\n\n\n# Disable scientific notation globally\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n# Trim whitespace from PA and SZ\nrespopagesex2024 &lt;- respopagesex2024 %&gt;%\n  mutate(\n    PA = trimws(PA),\n    SZ = trimws(SZ)\n  )\n\n# Clean and summarize population by PA, including subzone count\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)  # Count unique subzones per PA\n  ) %&gt;%\n  arrange(desc(Total_Pop))\n\n\n\n\n# Create bar chart for top 10\ntop_n &lt;- 10  \ntop_pa &lt;- pop_by_pa %&gt;%\n  slice_max(order_by = Total_Pop, n = top_n)\n\nplot1 &lt;- ggplot(data = top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Top\", top_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 325000, by = 50000),\n  limits = c(0, 325000)\n)\n\nprint(plot1)\n\n\n\n\n\n\n\n\n\n\n\n# Create bar chart for btm 10\nbtm_n &lt;- 10  # \nbtm_pa &lt;- pop_by_pa %&gt;%\n  slice_min(order_by = Total_Pop, n = btm_n)\n\nplot2 &lt;- ggplot(data = btm_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey40\", color = \"grey90\") +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    #angle = 90,\n    hjust = -0.2,\n    vjust = 0.4,\n    size = 3\n  ) +\n  coord_flip()+\n  theme_bw() +\n  theme(panel.grid.major.y = element_blank(),panel.border = element_blank())+\n  ggtitle(paste(\"Bottom\", btm_n, \"Planning Areas by Population (2024)\")) +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  #theme(axis.text.x = element_text(angle = 55, hjust = 1)) +\n  scale_y_continuous(\n  labels = comma,\n  expand = c(0, 0),\n  breaks = seq(0, 4750, by = 1000),\n  limits = c(0, 4750)\n)\n\nprint(plot2)",
    "crumbs": [
      "Home",
      "Take Home Exercise",
      "Take Home Exercise 1 P2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Code chunk below uses p_load function of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Code chunk below uses p_load function of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot2",
    "title": "Hands-on Exercise 1",
    "section": "R graphics vs ggplot2",
    "text": "R graphics vs ggplot2\nRgraphics\n\nhist(exam_data$MATHS)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2",
    "title": "Hands-on Exercise 1",
    "section": "ggplot2",
    "text": "ggplot2\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "Grammar of graphics",
    "text": "Grammar of graphics\n\nessential grammatical elements in ggplot2\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nAesthetic mappings\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nGeom\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\ngeom bar\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\ngeom dot plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\ngeom histogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nmodify by changing geom()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\nmodify by changing aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\ngeom_density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\n\ngeom density with colour\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\n\n\nboxplot with notches (notch=true)\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nviolin plot\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nscatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\ncombining plots (scatterplot and boxplot)\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\nworking with stats - stat() using statsummary() method means were not shown, additional code to boxplot to show mean values\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\nworking with stats - using geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\nadding best fit line on a scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\noverwriting default smooth method\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nworking with facet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nworking with facet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nggplot2 coordinates default form of bar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nflip axis with coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\ny and x axis range change\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nY and x axis fixed range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nthemes\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nplot horizontal bar chart with the classic theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nhorizontal bar chat with theme minimal theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html",
    "title": "MC1",
    "section": "",
    "text": "Important\n\n\n\nYou are required to install the R packages above, if necessary, before continue to the next step\nCheck packages to ensure they are installed\nCode\npacman::p_load(tidyverse, jsonlite, \n               SmartEDA, tidygraph, \n               ggraph)\n\n#tidygraph to build graph object, to work tgt with ggraph\n#ggplot no need to call out again as its in tidyverse\n\n#SmartEDA library for exploratory data analysis, good to have it to check data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#importing-knowledge-graph-data",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#importing-knowledge-graph-data",
    "title": "MC1",
    "section": "Importing Knowledge Graph Data",
    "text": "Importing Knowledge Graph Data\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nInspect Structure\n\n\nCode\nstr(kg,max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nCode\n#structure enable to check structure of the data\n#good to have this line to check structues of data\n\n\n\n\n\n\n\n\nNote\n\n\n\ndirected - tells you if its a directed graph\nnodes and links are in dataframe- can be read\nCan see data types etc from Environment tab of R-studio - look at the structure\n\nCan open and see the data table\n\n\n\n\n\n\nExtract and Inspect\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes) #kg$ know that pull nodes out\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#initial-eda",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#initial-eda",
    "title": "MC1",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y= `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nCode\n##want to know how many classes available for edge type\n## field names always use ``, not ''\n\n\n\n\nCode\nggplot \n\n\nfunction (data = NULL, mapping = aes(), ..., environment = parent.frame()) \n{\n    UseMethod(\"ggplot\")\n}\n&lt;bytecode: 0x0000022f3e0284a0&gt;\n&lt;environment: namespace:ggplot2&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#creating-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#creating-knowledge-graph",
    "title": "MC1",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mappying from node id to row index\navoid multiple id that have 0 0 but actually they have missing value\nto make sure they have unique id code\nTo reassign ID\ndepends on scenario, may need to subset data first before extracting - depends on use case\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n\n\n\nStep 2: Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map,by = c(\"source\" = \"id\"))%&gt;%\n    rename(from =index) %&gt;%\n    left_join(id_map, by = c(\"target\" = \"id\"))%&gt;%\n    rename(to = index)\n## see data table original source is 0 now become from 1\n\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n#if its directed, true, if not false. BUt in this case there is data to show its directed = true so can reference the data from the data"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#visualising-the-knowledge-graph",
    "title": "MC1",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n#once fix this, everytime run random is the same number\n\n\n\nVisualising the Whole Graph\n\n\nCode\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size =2.5) +\n  theme_void()\n\n\n\nStep 1:Filter edges to only “Memberof”\nmining for those “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter (`Edge Type` == \"MemberOf\")\n\n##filter off the edges but the nodes are still there, still a large set of data 17412 as the source\n\n\n\n\nStep 2: Extract only connected nodes (ie used in these edges)\n\n\nCode\n##additional code to remove and only used connected nodes, those that are useful\nused_nodes_indices &lt;- graph_memberof %&gt;%\n  activate(edges)%&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: keep only those node\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_nodes_indices) %&gt;%\n  select(-row_id) # optional cleanup\n\n\n\n\nplot the sub graph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha= 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1)+\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size=2.5)\n\n\n\n\n\n\n\n\n\nCode\n  theme_void()\n\n\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\nvisnetwork graph\nplotting a visnetwork graph to visualise the interactions centering around sailor shift\nStep 1 :\nLoad Libraries\n\n\nCode\nlibrary(dplyr)\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(jsonlite)\n\n\nLoad Json Data\n\n\nCode\n# --- 1. Load your JSON data ---\n# Assuming 'MC1_graph.json' is in your working directory\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\nset filter and no. of hops\n\n\nCode\n# --- Configuration ---\ntarget_name &lt;- \"Sailor Shift\"\nmax_hops_for_context &lt;- 3\n\n\nDefining edge type colors\n\n\nCode\n# --- Define ALL possible Edge Type Colors (Global and Consistent) ---\nall_edge_type_colors &lt;- c(\n  \"PerformerOf\" = \"#FF5733\",\n  \"ComposerOf\" = \"#33FF57\",\n  \"ProducerOf\" = \"#3357FF\",\n  \"LyricistOf\" = \"#FF33F5\",\n  \"RecordedBy\" = \"#F5FF33\",\n  \"InterpolatesFrom\" = \"#8A2BE2\",\n  \"InStyleOf\" = \"#DAA520\",\n  \"LyricalReferenceTo\" = \"#5F9EA0\",\n  \"CoverOf\" = \"#DC143C\",\n  \"DirectlySamples\" = \"#6A5ACD\",\n  \"DistributedBy\" = \"#20B2AA\",\n  \"MemberOf\" = \"#8B4513\",\n  \"default\" = \"#CCCCCC\" # Fallback color for any unlisted type\n)\n\n# --- Define ALL possible Node Type Colors (Global and Consistent) ---\nall_node_type_colors &lt;- c(\n  \"Song\" = \"lightblue\",\n  \"Person\" = \"orange\",\n  \"MusicalGroup\" = \"#CF9FFF\",\n  \"RecordLabel\" = \"lightgreen\",\n  \"default\" = \"gray\" # Fallback color for any unlisted type\n)\n\n\n\n\nCode\n# --- Get target node ID ---\nsailor_node &lt;- nodes_tbl %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n\n\n\nCode\n# --- Prepare edges_igraph_df for filtering and visNetwork ---\nedges_igraph_df &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  rename(from = source, to = target) # Rename to from/to for visNetwork\n\n\n\n\nCode\n# --- Section 1: General Context Network (2-hop) ---\n# Build igraph for neighborhood calculation\ng &lt;- graph_from_data_frame(edges_igraph_df, directed = FALSE)\n\n\n\n\nCode\n# Get N-hop neighborhood for general context\nego_nodes_indices &lt;- ego(graph = g, order = max_hops_for_context, nodes = sailor_id, mode = \"all\")[[1]]\nconnected_ids_general &lt;- names(ego_nodes_indices)\n\n\n\n\nCode\n# Filter nodes for the general context subgraph\nsub_nodes_general &lt;- nodes_tbl %&gt;%\n  filter(as.character(id) %in% connected_ids_general) %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    stage_name_str = if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n    release_date_str = if_else(!is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n    # Include genre information for the tooltip\n    genre_str = if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n    notable_str = if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\"),\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      genre_str, # Add genre to the tooltip\n      stage_name_str,\n      release_date_str,\n      notable_str\n    ),\n    group = `Node Type`,\n    # --- ADD THIS LINE TO CONTROL NODE SIZE ---\n    size = ifelse(id == sailor_id, 50, 15) # Sailor Shift size 50, others 15\n  ) %&gt;%\n  select(-stage_name_str, -release_date_str, -genre_str, -notable_str)\n\n\n\n\nCode\n# Filter edges for the general context subgraph and add color\nsub_edges_general &lt;- edges_igraph_df %&gt;%\n  filter(from %in% sub_nodes_general$id & to %in% sub_nodes_general$id) %&gt;%\n  mutate(color = all_edge_type_colors[`Edge Type`])\nsub_edges_general$color[is.na(sub_edges_general$color)] &lt;- all_edge_type_colors[\"default\"]\n\n\n\n\nCode\n# Visualize General Context Network\ngraph_general_context &lt;- visNetwork(nodes = sub_nodes_general, edges = sub_edges_general,\n                                    main = paste0(\"'\", target_name, \"' Network (\", max_hops_for_context, \"-hop Context)\")) %&gt;%\n  visNodes(shape = \"dot\", size = 15, label = ~label, title = ~title) %&gt;%\n  visEdges(\n    arrows = \"to\",\n    label = ~`Edge Type`,\n    font = list(size = 10, align = \"middle\"),\n    color = list(color = ~color, highlight = ~color)\n  ) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = list(enabled = TRUE, selected = sailor_id)) %&gt;%\n  # Define node groups and their colors explicitly (needed for visLegend)\n  visGroups(groupname = \"Song\", color = \"lightblue\") %&gt;%\n  visGroups(groupname = \"Person\", color = \"orange\") %&gt;%\n  visGroups(groupname = \"RecordLabel\", color = \"lightgreen\") %&gt;%\n  # Separate legend for nodes (on the left)\n  visLegend(\n    main = \"Node Types\",\n    useGroups = TRUE, # Show node groups in this legend\n    position = \"left\",\n    width = 0.15 # Adjust width as needed\n  ) %&gt;%\n  # Separate legend for edges (on the right)\n  visLegend(\n    main = \"Edge Types\",\n    # Do not use useGroups or useEdges here as we are manually adding edges\n    addEdges = data.frame(\n      color = unname(all_edge_type_colors),\n      label = names(all_edge_type_colors),\n      font.align = \"top\" # Or \"middle\", \"bottom\"\n    ),\n    position = \"right\",\n    width = 0.15 # Adjust width as needed\n  ) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)%&gt;% # Apply FR layout\n  visOptions(selectedBy = \"group\", \n             highlightNearest = TRUE, \n             nodesIdSelection = TRUE)\n\ngraph_general_context\n\n\n\n\n\n\nOptional - save as a html to view\n\n\nCode\nvisSave(graph_general_context, file = paste0(target_name, \"_general_network_\", max_hops_for_context, \"hop.html\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#want-graph",
    "href": "Take-home_Ex/Take-Home_Ex02/MC1_release/MC1 - working copy.html#want-graph",
    "title": "MC1",
    "section": "Want Graph",
    "text": "Want Graph\n\n\nCode\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(viridisLite) # For the viridis color palette, used for group_colors\n\n# --- 1. Load your JSON data ---\n# Assuming 'MC1_graph.json' is in your working directory\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# --- Configuration ---\ntarget_name &lt;- \"Sailor Shift\"\nmax_hops_for_context &lt;- 2 # For 2-hop neighborhood\n\n# --- Define ALL possible Edge Type Colors (Global and Consistent) ---\nall_edge_type_colors &lt;- c(\n  \"PerformerOf\" = \"#FF5733\",\n  \"ComposerOf\" = \"#33FF57\",\n  \"ProducerOf\" = \"#3357FF\",\n  \"LyricistOf\" = \"#FF33F5\",\n  \"RecordedBy\" = \"#F5FF33\",\n  \"InterpolatesFrom\" = \"#8A2BE2\",\n  \"InStyleOf\" = \"#DAA520\",\n  \"LyricalReferenceTo\" = \"#5F9EA0\",\n  \"CoverOf\" = \"#DC143C\",\n  \"DirectlySamples\" = \"#6A5ACD\",\n  \"DistributedBy\" = \"#20B2AA\",\n  \"MemberOf\" = \"#8B4513\",\n  \"default\" = \"#CCCCCC\" # Fallback color for any unlisted type\n)\n\n# --- Define ALL possible Node Type Colors (Global and Consistent) ---\nall_node_type_colors &lt;- c(\n  \"Song\" = \"lightblue\",\n  \"Person\" = \"orange\",\n  \"MusicalGroup\" = \"#CF9FFF\",\n  \"RecordLabel\" = \"lightgreen\",\n  \"Album\" = \"brown\", # Added a color for Album\n  \"default\" = \"gray\" # Fallback color for any unlisted type\n)\n\n# --- NEW: Define which edge types to display and include in the legend ---\n# Only these specific edge types will be displayed\ndesired_edge_types_to_display &lt;- c(\n  \"InterpolatesFrom\",\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"CoverOf\",\n  \"LyricalReferenceTo\",\n  \"ProducerOf\",\n  \"ComposerOf\",\n  \"PerformerOf\",\n  \"LyricistOf\",\n  \"MemberOf\"\n)\n\n# --- IMPORTANT: Strict Node ID Cleaning ---\n# This step ensures all node IDs are valid numbers before processing\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(\n    # Attempt to convert ID to numeric. If it fails, it becomes NA.\n    temp_numeric_id = as.numeric(as.character(id))\n  ) %&gt;%\n  # Filter out nodes whose IDs could not be converted to a valid number\n  filter(!is.na(temp_numeric_id)) %&gt;%\n  # Use the cleaned numeric ID, convert back to character for consistency with igraph\n  mutate(id = as.character(temp_numeric_id)) %&gt;%\n  select(-temp_numeric_id) # Remove the temporary column\n\n# --- Get target node ID from the cleaned nodes table ---\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found in cleaned data.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id) # Ensure sailor_id is character\n\n# --- IMPORTANT: Pre-filter edges to ensure valid source/target IDs ---\n# Get a list of all valid node IDs from the cleaned nodes_tbl\nvalid_node_ids &lt;- nodes_tbl_cleaned$id\n\nedges_df_for_igraph &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  # Filter edges: both source AND target must exist in the cleaned list of node IDs\n  filter(source %in% valid_node_ids & target %in% valid_node_ids) %&gt;%\n  # Ensure source and target are character type for consistency with node IDs\n  mutate(across(c(source, target), as.character)) %&gt;%\n  # Rename source/target to from/to here for consistency\n  rename(from = source, to = target)\n\n# --- Build full igraph from the pre-filtered edge list ---\n# Explicitly provide the vertices using the cleaned node IDs for robustness\ng_full &lt;- graph_from_data_frame(edges_df_for_igraph, directed = TRUE, vertices = nodes_tbl_cleaned$id)\n\n# --- Get N-hop neighborhood (2-hop in this case) ---\nego_nodes_indices &lt;- ego(graph = g_full, order = max_hops_for_context, nodes = sailor_id, mode = \"all\")[[1]]\nconnected_ids_general &lt;- names(ego_nodes_indices)\n\n# --- Prepare Nodes for visNetwork ---\nnodes_for_visnetwork &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% connected_ids_general) %&gt;%\n  mutate(\n    # 'id' column for visNetwork's internal mapping (already character)\n    label = name, # 'label' column for display\n    title = paste0( # 'title' for hover text (tooltip)\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      if_else(`Node Type` == \"Song\" & !is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\")\n    ),\n    # IMPORTANT: 'group' column for highlightNearest and selectedBy.\n    # For Songs, group by genre. For others, group by Node Type.\n    group = if_else(`Node Type` == \"Song\" & !is.na(genre), genre, `Node Type`),\n    # Set default size for nodes, you can customize this\n    # --- ADJUSTED: Sailor Shift node size set to 50 ---\n    size = ifelse(id == sailor_id, 50, 15)\n  )\n\n# --- Prepare Edges for visNetwork ---\n# Filter edges for the general context subgraph AND by desired_edge_types_to_display\nsub_edges_general &lt;- edges_df_for_igraph %&gt;%\n  filter(from %in% nodes_for_visnetwork$id & to %in% nodes_for_visnetwork$id) %&gt;%\n  # NEW: Filter by the desired edge types (now only specific types)\n  filter(`Edge Type` %in% desired_edge_types_to_display) %&gt;%\n  mutate(\n    label = `Edge Type`, # Label for edge display\n    title = `Edge Type`, # Title for edge hover text\n    arrows = \"to\", # Add arrows for directed graph\n    # Assign color based on `Edge Type` using the full color mapping\n    color = all_edge_type_colors[`Edge Type`]\n  )\n\n# Ensure no NA colors if a type wasn't in `all_edge_type_colors` (though it should be)\nsub_edges_general$color[is.na(sub_edges_general$color)] &lt;- all_edge_type_colors[\"default\"]\n\n\n# --- Define node colors based on group (genre or Node Type) for initial rendering ---\n# Use the global `all_node_type_colors` for consistency across all graphs\nunique_node_groups &lt;- unique(nodes_for_visnetwork$group)\nnode_group_colors &lt;- setNames(rep(all_node_type_colors[\"default\"], length(unique_node_groups)), unique_node_groups) # Start with default\nfor (group_name in names(all_node_type_colors)) {\n  if (group_name %in% unique_node_groups) {\n    node_group_colors[group_name] &lt;- all_node_type_colors[group_name]\n  }\n}\n# Make sure any genre-specific colors are handled if 'group' became genre\n# For example, if \"Oceanus Folk\" is a genre, ensure its color is set here\n# node_group_colors[\"Oceanus Folk\"] &lt;- \"#FFD700\" # If Oceanus Folk is a genre\n\n# Correctly assign colors from `nodes_for_visnetwork` directly.\n# The 'color' column in nodes_for_visnetwork already has the logic for Sailor Shift's color\n# and then falls back to `all_node_type_colors`.\n# We don't need a `node_group_colors` here anymore if we define `color` in `nodes_for_visnetwork` directly.\n# Let's add the color directly to nodes_for_visnetwork in the mutate step, simplifying this.\nnodes_for_visnetwork &lt;- nodes_for_visnetwork %&gt;%\n  mutate(\n    base_color = all_node_type_colors[`Node Type`],\n    base_color = ifelse(is.na(base_color), all_node_type_colors[\"default\"], base_color),\n    # Use the golden color for Sailor Shift, otherwise use the base_color\n    node_display_color = ifelse(id == sailor_id, \"gold\", base_color)\n  ) %&gt;%\n  select(-base_color) # Remove the temporary column\n\n# --- Create the visNetwork plot ---\ngraph_general_context &lt;- visNetwork(nodes = nodes_for_visnetwork, edges = sub_edges_general,\n                                    main = paste0(\"'\", target_name, \"' Network (\", max_hops_for_context, \"-hop Context) - Selected Edge Types\")) %&gt;%\n  visNodes(\n    color = list(\n      background = ~node_display_color, # Use the directly calculated color\n      border = \"black\",\n      highlight = list(background = \"red\", border = \"darkred\"),\n      hover = list(background = \"lightgray\", border = \"darkgray\")\n    ),\n    shadow = TRUE,\n    font = list(size = 12),\n    shape = \"dot\"\n  ) %&gt;%\n  visEdges(\n    arrows = \"to\",\n    label = ~`Edge Type`,\n    font = list(size = 10, align = \"middle\"),\n    # Use the 'color' column defined in sub_edges_general for edges\n    color = list(color = ~color, highlight = ~color)\n  ) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = TRUE, # Allow selecting nodes by ID from a dropdown\n    selectedBy = \"group\" # Enables a dropdown to select/highlight nodes by their 'group' (genre, Node Type)\n  ) %&gt;%\n  # Define node groups and their colors explicitly for the legend (visGroups)\n  # Ensure these match the all_node_type_colors or specific genre colors\n  visGroups(groupname = \"Song\", color = all_node_type_colors[\"Song\"]) %&gt;%\n  visGroups(groupname = \"Person\", color = all_node_type_colors[\"Person\"]) %&gt;%\n  visGroups(groupname = \"RecordLabel\", color = all_node_type_colors[\"RecordLabel\"]) %&gt;%\n  visGroups(groupname = \"Album\", color = all_node_type_colors[\"Album\"]) %&gt;% # Add Album group\n  visGroups(groupname = \"MusicalGroup\", color = all_node_type_colors[\"MusicalGroup\"]) %&gt;% # Add MusicalGroup\n  # Add more visGroups calls for each genre if you want them to appear separately in the legend\n  # For example: visGroups(groupname = \"Oceanus Folk\", color = \"#FFD700\")\n\n  # Legend (on the left)\n  visLegend(\n    main = \"Node Types & Genres\", # Updated legend title to reflect genre groups\n    useGroups = TRUE, # Show node groups in this legend\n    position = \"left\",\n    width = 0.15\n  ) %&gt;%\n  visInteraction(\n    navigationButtons = TRUE,\n    keyboard = TRUE\n  ) %&gt;%\n  # Using visIgraphLayout for FR layout\n  visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)\n\n\n\n# Save the network as an HTML file\nvisSave(graph_general_context, file = paste0(target_name, \"_general_network_\", max_hops_for_context, \"hop_selected_edges.html\"))\n\n# Display the network\ngraph_general_context\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(viridisLite) # For the viridis color palette, used for group_colors\n\n# --- 1. Load your JSON data ---\n# Assuming 'MC1_graph.json' is in your working directory\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# --- Configuration ---\ntarget_name &lt;- \"Sailor Shift\"\n\n# --- Define the specific edge types for this new visualization ---\ndesired_edge_types_for_group_interactions &lt;- c(\n  \"InterpolatesFrom\",\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"CoverOf\",\n  \"LyricalReferenceTo\"\n)\n\n\n# --- IMPORTANT: Strict Node ID Cleaning ---\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(\n    temp_numeric_id = as.numeric(as.character(id))\n  ) %&gt;%\n  filter(!is.na(temp_numeric_id)) %&gt;%\n  mutate(id = as.character(temp_numeric_id)) %&gt;%\n  select(-temp_numeric_id)\n\n# --- Get target node ID ---\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found in cleaned data.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n# --- Prepare edges for igraph and visNetwork ---\nedges_df_processed &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  filter(source %in% nodes_tbl_cleaned$id & target %in% nodes_tbl_cleaned$id) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  rename(from = source, to = target)\n\n# --- Core Logic for the New Visualization ---\n\n# 1. Filter edges to only include the desired interaction types\nrelevant_edges_for_group_interactions &lt;- edges_df_processed %&gt;%\n  filter(`Edge Type` %in% desired_edge_types_for_group_interactions)\n\n# 2. Identify all nodes (including Sailor Shift) connected by these specific edge types\nnodes_connected_by_specific_edges &lt;- unique(c(relevant_edges_for_group_interactions$from, relevant_edges_for_group_interactions$to))\n\n# 3. Filter for 'MusicalGroup' and 'Person' nodes that are within this specific interaction context,\n#    AND explicitly include 'Sailor Shift' node.\ntarget_group_node_ids &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% nodes_connected_by_specific_edges) %&gt;%\n  filter(`Node Type` %in% c(\"MusicalGroup\", \"Person\")) %&gt;%\n  pull(id)\n\n# Add sailor_id to the list of target group nodes\ntarget_group_node_ids &lt;- unique(c(target_group_node_ids, sailor_id))\n\n\n# 4. Prepare the final nodes for the visualization\n# This includes the identified 'MusicalGroup', 'Person', and 'Sailor Shift' nodes\nnodes_for_new_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% target_group_node_ids) %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\")\n    ),\n    group = `Node Type`, # Group by Node Type for coloring/legend\n    size = ifelse(id == sailor_id, 40, 20), # Make Sailor Shift node larger\n     # First, get the base color from the global map based on Node Type\n    base_color = all_node_type_colors[`Node Type`],\n    # Handle cases where Node Type might not be in the map (will result in NA)\n    base_color = ifelse(is.na(base_color), all_node_type_colors[\"default\"], base_color),\n    # Then, apply the specific color for Sailor Shift, overriding the base color\n    color = ifelse(id == sailor_id, \"gold\", base_color)\n  )\n\n# 5. Prepare the final edges for the visualization\nedges_for_new_vis &lt;- relevant_edges_for_group_interactions %&gt;%\n  filter(from %in% nodes_for_new_vis$id & to %in% nodes_for_new_vis$id) %&gt;%\n  mutate(\n    label = `Edge Type`,\n    title = `Edge Type`,\n    arrows = \"to\",\n    color = all_edge_type_colors[`Edge Type`]\n  )\n\n# Ensure no NA colors if a type wasn't in `all_edge_type_colors`\nedges_for_new_vis$color[is.na(edges_for_new_vis$color)] &lt;- all_edge_type_colors[\"default\"]\n\n# --- IMPORTANT: Check if nodes or edges are empty before plotting ---\nif (nrow(nodes_for_new_vis) == 0) {\n  message(\"No nodes found for the specified filters. Cannot create the network graph.\")\n} else if (nrow(edges_for_new_vis) == 0) {\n  message(\"No edges found for the specified filters between the selected nodes. The network graph will be empty or show only isolated nodes.\")\n} else {\n  # --- Create the NEW visNetwork plot ---\n  graph_group_interactions &lt;- visNetwork(nodes = nodes_for_new_vis, edges = edges_for_new_vis,\n                                         main = paste0(\"Interactions of '\", target_name, \"' with Musical Groups and Persons\")) %&gt;%\n    visNodes(\n      # UPDATED: Use the 'color' column for background color\n      color = list(\n        background = ~color,\n        border = \"black\",\n        highlight = list(background = \"red\", border = \"darkred\"),\n        hover = list(background = \"lightgray\", border = \"darkgray\")\n      ),\n      shadow = TRUE,\n      font = list(size = 12),\n      shape = \"dot\"\n    ) %&gt;%\n    visEdges(\n      color = list(color = ~color, highlight = ~color),\n      smooth = TRUE,\n      shadow = TRUE,\n      font = list(size = 10, align = \"middle\")\n    ) %&gt;%\n    visOptions(\n      highlightNearest = TRUE,\n      nodesIdSelection = list(enabled = TRUE, selected = sailor_id),\n      selectedBy = \"group\"\n    ) %&gt;%\n    # Define node groups and their colors explicitly for the legend.\n    # Note: Sailor Shift's explicit color will override its group color visually,\n    # but it will still be part of its original 'Node Type' group in the dropdown/legend.\n    visGroups(groupname = \"Person\", color = \"orange\") %&gt;%\n    visGroups(groupname = \"MusicalGroup\", color = \"#CF9FFF\") %&gt;%\n    visGroups(groupname = \"Song\", color = \"lightblue\") %&gt;%\n\n    # Separate legend for nodes (on the left)\n    visLegend(\n      main = \"Node Types\",\n      useGroups = TRUE,\n      position = \"left\",\n      width = 0.15\n    ) %&gt;%\n    # Separate legend for edges (on the right)\n    visLegend(\n      main = \"Edge Types\",\n      addEdges = data.frame(\n        color = all_edge_type_colors[desired_edge_types_for_group_interactions],\n        label = desired_edge_types_for_group_interactions,\n        font.align = \"top\"\n      ),\n      position = \"right\",\n      width = 0.15\n    ) %&gt;%\n    visInteraction(\n      navigationButtons = TRUE,\n      keyboard = TRUE\n    ) %&gt;%\n    visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)\n\n  # Save the network as an HTML file\n  visSave(graph_group_interactions, file = paste0(target_name, \"_group_interactions_with_sailor_shift_highlighted.html\"))\n}\n\n  # Display the network\n  graph_group_interactions\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(viridisLite) # For the viridis color palette, used for group_colors\n\n# --- 1. Load your JSON data ---\n# Assuming 'MC1_graph.json' is in your working directory\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# --- Configuration ---\ntarget_name &lt;- \"Sailor Shift\"\nmax_hops_for_context &lt;- 2 # Define the maximum number of hops from Sailor Shift\n\n# --- Define the specific edge types for this new visualization ---\ndesired_edge_types_for_group_interactions &lt;- c(\n  \"InterpolatesFrom\",\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"CoverOf\"\n)\n\n\n# --- IMPORTANT: Strict Node ID Cleaning ---\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(\n    temp_numeric_id = as.numeric(as.character(id))\n  ) %&gt;%\n  filter(!is.na(temp_numeric_id)) %&gt;%\n  mutate(id = as.character(temp_numeric_id)) %&gt;%\n  select(-temp_numeric_id)\n\n# --- Get target node ID ---\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found in cleaned data.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n# --- Prepare edges for igraph and visNetwork ---\nedges_df_processed &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  filter(source %in% nodes_tbl_cleaned$id & target %in% nodes_tbl_cleaned$id) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  rename(from = source, to = target)\n\n# --- Build igraph from full edges_df_processed for neighborhood calculation ---\ng &lt;- graph_from_data_frame(edges_df_processed, directed = FALSE) # Use directed = TRUE if your graph is truly directed for path finding\n\n# --- Core Logic for the New Visualization with Hop Limit ---\n\n# 1. Get nodes within N-hop neighborhood of Sailor Shift\nego_nodes_indices &lt;- ego(graph = g, order = max_hops_for_context, nodes = sailor_id, mode = \"all\")[[1]]\nconnected_ids_within_hops &lt;- names(ego_nodes_indices)\n\n# 2. Filter edges to be within this N-hop neighborhood AND also be one of the desired interaction types\nrelevant_edges_for_display &lt;- edges_df_processed %&gt;%\n  filter(from %in% connected_ids_within_hops & to %in% connected_ids_within_hops) %&gt;% # Filter by hops first\n  filter(`Edge Type` %in% desired_edge_types_for_group_interactions) # Then by specific edge types\n\n# 3. Identify all nodes involved in these filtered edges\nnodes_involved_in_filtered_edges &lt;- unique(c(relevant_edges_for_display$from, relevant_edges_for_display$to))\n\n# 4. Filter for ALL desired node types from the nodes involved in the filtered edges,\n#    AND explicitly include 'Sailor Shift' node.\ntarget_nodes_for_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% nodes_involved_in_filtered_edges) %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"Song\", \"RecordLabel\", \"Album\", \"MusicalGroup\")) %&gt;%\n  pull(id)\n\n# Add sailor_id to the list of target nodes for visualization\ntarget_nodes_for_vis &lt;- unique(c(target_nodes_for_vis, sailor_id))\n\n\n# 5. Prepare the final nodes for the visualization\nnodes_for_new_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% target_nodes_for_vis) %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\")\n    ),\n    group = `Node Type`,\n    size = ifelse(id == sailor_id, 30, 20),\n    base_color = all_node_type_colors[`Node Type`],\n    base_color = ifelse(is.na(base_color), all_node_type_colors[\"default\"], base_color),\n    color = ifelse(id == sailor_id, \"gold\", base_color)\n  ) %&gt;%\n  select(-base_color)\n\n# For any node types not explicitly defined in all_node_type_colors, use the default\nnodes_for_new_vis$color[is.na(nodes_for_new_vis$color)] &lt;- all_node_type_colors[\"default\"]\n\n\n# 6. Prepare the final edges for the visualization\n# Filter the 'relevant_edges_for_display' further to ensure both ends are in 'nodes_for_new_vis'\nedges_for_new_vis &lt;- relevant_edges_for_display %&gt;%\n  filter(from %in% nodes_for_new_vis$id & to %in% nodes_for_new_vis$id) %&gt;%\n  mutate(\n    label = `Edge Type`,\n    title = `Edge Type`,\n    arrows = \"to\",\n    color = all_edge_type_colors[`Edge Type`]\n  )\n\n# Ensure no NA colors if a type wasn't in `all_edge_type_colors`\nedges_for_new_vis$color[is.na(edges_for_new_vis$color)] &lt;- all_edge_type_colors[\"default\"]\n\n# --- IMPORTANT: Check if nodes or edges are empty before plotting ---\nif (nrow(nodes_for_new_vis) == 0) {\n  message(\"No nodes found for the specified filters and hop limit. Cannot create the network graph.\")\n} else if (nrow(edges_for_new_vis) == 0) {\n  message(\"No edges found for the specified filters and hop limit between the selected nodes. The network graph will be empty or show only isolated nodes.\")\n} else {\n  # --- Create the NEW visNetwork plot ---\n  graph_group_interactions &lt;- visNetwork(nodes = nodes_for_new_vis, edges = edges_for_new_vis,\n                                         main = paste0(\"Interactions of '\", target_name, \"' (\", max_hops_for_context, \"-hop relevant connections)\")) %&gt;% # Updated title\n    visNodes(\n      color = list(\n        background = ~color,\n        border = \"black\",\n        highlight = list(background = \"red\", border = \"darkred\"),\n        hover = list(background = \"lightgray\", border = \"darkgray\")\n      ),\n      shadow = TRUE,\n      font = list(size = 12),\n      shape = \"dot\"\n    ) %&gt;%\n    visEdges(\n      color = list(color = ~color, highlight = ~color),\n      smooth = TRUE,\n      shadow = TRUE,\n      font = list(size = 10, align = \"middle\")\n    ) %&gt;%\n    visOptions(\n      highlightNearest = TRUE,\n      nodesIdSelection = list(enabled = TRUE, selected = sailor_id),\n      selectedBy = \"group\"\n    ) %&gt;%\n    # Define node groups and their colors explicitly for the legend using global map\n    visGroups(groupname = \"Person\", color = all_node_type_colors[\"Person\"]) %&gt;%\n    visGroups(groupname = \"MusicalGroup\", color = all_node_type_colors[\"MusicalGroup\"]) %&gt;%\n    visGroups(groupname = \"Song\", color = all_node_type_colors[\"Song\"]) %&gt;%\n    visGroups(groupname = \"RecordLabel\", color = all_node_type_colors[\"RecordLabel\"]) %&gt;%\n    visGroups(groupname = \"Album\", color = all_node_type_colors[\"Album\"]) %&gt;%\n\n    # Separate legend for nodes (on the left)\n    visLegend(\n      main = \"Node Types\",\n      useGroups = TRUE,\n      position = \"left\",\n      width = 0.15\n    ) %&gt;%\n    # Separate legend for edges (on the right)\n    visLegend(\n      main = \"Edge Types\",\n      addEdges = data.frame(\n        color = all_edge_type_colors[desired_edge_types_for_group_interactions],\n        label = desired_edge_types_for_group_interactions,\n        font.align = \"top\"\n      ),\n      position = \"right\",\n      width = 0.15\n    ) %&gt;%\n    visInteraction(\n      navigationButtons = TRUE,\n      keyboard = TRUE\n    ) %&gt;%\n    visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)\n\n  # Save the network as an HTML file\n  visSave(graph_group_interactions, file = paste0(target_name, \"_interactions_\", max_hops_for_context, \"hop_related_types_highlighted.html\")) # Updated filename\n}\n\n  # Display the network\n  graph_group_interactions\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(viridisLite) # For the viridis color palette, used for group_colors\n\n# --- 1. Load your JSON data ---\n# Assuming 'MC1_graph.json' is in your working directory\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# --- Configuration ---\ntarget_name &lt;- \"Sailor Shift\"\nmax_hops_for_context &lt;- 2 # Define the maximum number of hops from Sailor Shift\n\n# --- Define the specific edge types for this new visualization ---\n# These are the edge types that will be colored specifically and listed in the legend.\n# If an edge type exists in the data but is NOT in this list, it will use 'default' color.\ndesired_edge_types_for_group_interactions &lt;- c(\n  \"InterpolatesFrom\",\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"CoverOf\",\n  \"PerformerOf\",\n  \"ComposerOf\",\n  \"ProducerOf\",\n  \"LyricistOf\",\n  \"RecordedBy\",\n  \"LyricalReferenceTo\",\n  \"DistributedBy\",\n  \"MemberOf\"\n) # Including all common types for the legend to be comprehensive\n\n# --- Define ALL possible Edge Type Colors (Global and Consistent) ---\nall_edge_type_colors &lt;- c(\n  \"PerformerOf\" = \"#FF5733\",\n  \"ComposerOf\" = \"#33FF57\",\n  \"ProducerOf\" = \"#3357FF\",\n  \"LyricistOf\" = \"#FF33F5\",\n  \"RecordedBy\" = \"#F5FF33\",\n  \"InterpolatesFrom\" = \"#8A2BE2\",\n  \"InStyleOf\" = \"#DAA520\",\n  \"LyricalReferenceTo\" = \"#5F9EA0\",\n  \"CoverOf\" = \"#DC143C\",\n  \"DirectlySamples\" = \"#6A5ACD\",\n  \"DistributedBy\" = \"#20B2AA\",\n  \"MemberOf\" = \"#8B4513\",\n  \"default\" = \"#CCCCCC\" # Fallback color for any unlisted type\n)\n\n# --- Define ALL possible Node Type Colors (Global and Consistent) ---\nall_node_type_colors &lt;- c(\n  \"Song\" = \"lightblue\",\n  \"Person\" = \"orange\",\n  \"MusicalGroup\" = \"#CF9FFF\",\n  \"RecordLabel\" = \"lightgreen\",\n  \"Album\" = \"brown\", # Added a color for Album\n  \"default\" = \"gray\" # Fallback color for any unlisted type\n)\n\n# --- IMPORTANT: Strict Node ID Cleaning ---\nnodes_tbl_cleaned &lt;- nodes_tbl %&gt;%\n  mutate(\n    temp_numeric_id = as.numeric(as.character(id))\n  ) %&gt;%\n  filter(!is.na(temp_numeric_id)) %&gt;%\n  mutate(id = as.character(temp_numeric_id)) %&gt;%\n  select(-temp_numeric_id)\n\n# --- Get target node ID ---\nsailor_node &lt;- nodes_tbl_cleaned %&gt;% filter(name == target_name)\nif (nrow(sailor_node) == 0) stop(paste(\"No node named '\", target_name, \"' found in cleaned data.\", sep=\"\"))\nsailor_id &lt;- as.character(sailor_node$id)\n\n# --- Prepare edges for igraph and visNetwork ---\nedges_df_processed &lt;- edges_tbl %&gt;%\n  select(source, target, `Edge Type`, key) %&gt;%\n  filter(source %in% nodes_tbl_cleaned$id & target %in% nodes_tbl_cleaned$id) %&gt;%\n  mutate(across(c(source, target), as.character)) %&gt;%\n  rename(from = source, to = target)\n\n# --- Build igraph from full edges_df_processed for neighborhood calculation ---\n# Using directed = FALSE here unless your graph truly implies only one-way relationships\ng &lt;- graph_from_data_frame(edges_df_processed, directed = FALSE)\n\n# --- Core Logic for the New Visualization with Hop Limit ---\n\n# 1. Get nodes within N-hop neighborhood of Sailor Shift\nego_nodes_indices &lt;- ego(graph = g, order = max_hops_for_context, nodes = sailor_id, mode = \"all\")[[1]]\nconnected_ids_within_hops &lt;- names(ego_nodes_indices)\n\n# 2. Filter ALL edges to be only within this N-hop neighborhood (no edge type filtering yet)\nrelevant_edges_for_display &lt;- edges_df_processed %&gt;%\n  filter(from %in% connected_ids_within_hops & to %in% connected_ids_within_hops)\n\n# 3. Identify all nodes involved in these filtered edges\nnodes_involved_in_filtered_edges &lt;- unique(c(relevant_edges_for_display$from, relevant_edges_for_display$to))\n\n# 4. Filter for ALL desired node types from the nodes involved in the filtered edges,\n#    AND explicitly include 'Sailor Shift' node.\ntarget_nodes_for_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% nodes_involved_in_filtered_edges) %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"Song\", \"RecordLabel\", \"Album\", \"MusicalGroup\")) %&gt;%\n  pull(id)\n\n# Add sailor_id to the list of target nodes for visualization\ntarget_nodes_for_vis &lt;- unique(c(target_nodes_for_vis, sailor_id))\n\n\n# 5. Prepare the final nodes for the visualization\nnodes_for_new_vis &lt;- nodes_tbl_cleaned %&gt;%\n  filter(id %in% target_nodes_for_vis) %&gt;%\n  mutate(\n    id = as.character(id),\n    label = name,\n    title = paste0(\n      \"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Node Type:&lt;/b&gt; \", `Node Type`, \"&lt;br&gt;\",\n      if_else(!is.na(stage_name), paste0(\"&lt;b&gt;Stage Name:&lt;/b&gt; \", stage_name, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(release_date), paste0(\"&lt;b&gt;Release Date:&lt;/b&gt; \", release_date, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(genre), paste0(\"&lt;b&gt;Genre:&lt;/b&gt; \", genre, \"&lt;br&gt;\"), \"\"),\n      if_else(!is.na(notable), paste0(\"&lt;b&gt;Notable:&lt;/b&gt; \", notable, \"&lt;br&gt;\"), \"\")\n    ),\n    group = `Node Type`,\n    size = ifelse(id == sailor_id, 40, 20),\n    base_color = all_node_type_colors[`Node Type`],\n    base_color = ifelse(is.na(base_color), all_node_type_colors[\"default\"], base_color),\n    color = ifelse(id == sailor_id, \"gold\", base_color)\n  ) %&gt;%\n  select(-base_color)\n\n# For any node types not explicitly defined in all_node_type_colors, use the default\nnodes_for_new_vis$color[is.na(nodes_for_new_vis$color)] &lt;- all_node_type_colors[\"default\"]\n\n\n# 6. Prepare the final edges for the visualization\n# Filter the 'relevant_edges_for_display' further to ensure both ends are in 'nodes_for_new_vis'\nedges_for_new_vis &lt;- relevant_edges_for_display %&gt;%\n  filter(from %in% nodes_for_new_vis$id & to %in% nodes_for_new_vis$id) %&gt;%\n  mutate(\n    label = `Edge Type`,\n    title = `Edge Type`,\n    arrows = \"to\",\n    color = all_edge_type_colors[`Edge Type`] # Still use global edge type map for colors\n  )\n\n# Ensure no NA colors if a type wasn't in `all_edge_type_colors`\nedges_for_new_vis$color[is.na(edges_for_new_vis$color)] &lt;- all_edge_type_colors[\"default\"]\n\n# --- IMPORTANT: Check if nodes or edges are empty before plotting ---\nif (nrow(nodes_for_new_vis) == 0) {\n  message(\"No nodes found for the specified filters and hop limit. Cannot create the network graph.\")\n} else if (nrow(edges_for_new_vis) == 0) {\n  message(\"No edges found for the specified filters and hop limit between the selected nodes. The network graph will be empty or show only isolated nodes.\")\n} else {\n  # --- Create the NEW visNetwork plot ---\n  graph_group_interactions &lt;- visNetwork(nodes = nodes_for_new_vis, edges = edges_for_new_vis,\n                                         main = paste0(\"Interactions of '\", target_name, \"' (\", max_hops_for_context, \"-hop All Relevant Connections)\")) %&gt;% # Updated title\n    visNodes(\n      color = list(\n        background = ~color,\n        border = \"black\",\n        highlight = list(background = \"red\", border = \"darkred\"),\n        hover = list(background = \"lightgray\", border = \"darkgray\")\n      ),\n      shadow = TRUE,\n      font = list(size = 12),\n      shape = \"dot\"\n    ) %&gt;%\n    visEdges(\n      color = list(color = ~color, highlight = ~color),\n      smooth = TRUE,\n      shadow = TRUE,\n      font = list(size = 10, align = \"middle\")\n    ) %&gt;%\n    visOptions(\n      highlightNearest = TRUE,\n      nodesIdSelection = list(enabled = TRUE, selected = sailor_id),\n      selectedBy = \"group\"\n    ) %&gt;%\n    # Define node groups and their colors explicitly for the legend using global map\n    visGroups(groupname = \"Person\", color = all_node_type_colors[\"Person\"]) %&gt;%\n    visGroups(groupname = \"MusicalGroup\", color = all_node_type_colors[\"MusicalGroup\"]) %&gt;%\n    visGroups(groupname = \"Song\", color = all_node_type_colors[\"Song\"]) %&gt;%\n    visGroups(groupname = \"RecordLabel\", color = all_node_type_colors[\"RecordLabel\"]) %&gt;%\n    visGroups(groupname = \"Album\", color = all_node_type_colors[\"Album\"]) %&gt;%\n\n    # Separate legend for nodes (on the left)\n    visLegend(\n      main = \"Node Types\",\n      useGroups = TRUE,\n      position = \"left\",\n      width = 0.15\n    ) %&gt;%\n    # Separate legend for edges (on the right)\n    visLegend(\n      main = \"Edge Types\",\n      # Create data for edge legend based on actual edge types present in the graph\n      addEdges = data.frame(\n        edge_types_in_graph &lt;- unique(edges_for_new_vis$`Edge Type`),\n        color = all_edge_type_colors[edge_types_in_graph],\n        label = edge_types_in_graph,\n        font.align = \"top\"\n      ),\n      position = \"right\",\n      width = 0.15\n    ) %&gt;%\n    visInteraction(\n      navigationButtons = TRUE,\n      keyboard = TRUE\n    ) %&gt;%\n    visIgraphLayout(layout = \"layout_with_fr\", randomSeed = 42)\n\n  # Save the network as an HTML file\n  visSave(graph_group_interactions, file = paste0(target_name, \"_interactions_\", max_hops_for_context, \"hop_all_edge_types_highlighted.html\")) # Updated filename\n}\n\n  # Display the network\n  graph_group_interactions\n\n\n\n\n\n\nfrom the 3 hop graph:\nDesign and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?"
  }
]